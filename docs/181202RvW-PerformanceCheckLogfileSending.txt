void dataLogExtractEntries(Print &dest, long startidx, long numberOfEntries, const char probeSeparator[])
{
  unsigned long filesize = datalogfile.size();
  unsigned long samplesInFile = filesize / DATALOG_BYTES_PER_SAMPLE;

  tsidx = 0;
  
  if (startidx >= samplesInFile) {
    dest.print("arg1 exceeds file size:");
    dest.println(samplesInFile);
  } else {
    timestamps[0] = micros();  //todo remove
    datalogfile.seek(startidx * DATALOG_BYTES_PER_SAMPLE); 
    timestamps[1] = micros();  //todo remove Ser, Eth 32 
    long samplesToRead = min(numberOfEntries, min(24 * 60, samplesInFile - startidx)); // no more than one day at a time
    timestamps[2] = micros();  //todo remove 4 
    dest.print("timestamp(s) "); dest.print(probeSeparator);
    timestamps[3] = micros();  //todo remove Ser 120 Eth 604
    for (int i = 0; i < NUMBER_OF_PROBES; ++i) {
      dest.print(probeNames[i]);
      dest.print(" min avg max ");
      dest.print(probeSeparator);
    }
    timestamps[4] = micros();  //todo remove Ser 87272 Eth 4064
    dest.print("cumul. insolation "); dest.print(probeSeparator);
    dest.print("surge tank avg level "); dest.print(probeSeparator);  //todo remove
    dest.print("cumul. pump runtime(s) "); dest.print(probeSeparator);
    dest.print("pump state "); dest.print(probeSeparator);
    dest.println();
    timestamps[5] = micros();  //todo remove Ser 86316 Eth 2888

    for (long i = 0; i < samplesToRead; ++i) {
      long timestamp;
      float cumulativeInsolation;
      float pumpRuntime;
      float surgeTankLevel;

      timestamps[6] = micros();  //todo remove 
      datalogfile.readBytes((byte *)&timestamp, sizeof(timestamp));
      timestamps[7] = micros();  //todo remove Ser 3312 Eth 124
      dest.print(timestamp); dest.print(" "); dest.print(probeSeparator);
      timestamps[8] = micros();  //todo remove Ser 9160 Eth 1072

      for (int j = 0; j < NUMBER_OF_PROBES; ++j) {
        float temp[3];
        timestamps[9] = micros();  //todo remove  (Ser 70724 Eth 13284)
        datalogfile.readBytes((byte *)temp, sizeof(temp));
        timestamps[10] = micros();  //todo remove Ser 360 Eth 360
        for (int k = 0; k < 3; ++k) {
          dest.print(temp[k], 1);
          dest.print(" ");
        }
        timestamps[11] = micros();  //todo remove Ser 15240 Eth 2776
        dest.print(probeSeparator);
      }

      timestamps[12] = micros();  //todo remove Ser 2076 Eth 184
      datalogfile.readBytes((byte *)&cumulativeInsolation, sizeof(cumulativeInsolation));
      timestamps[13] = micros();  //todo remove Ser 132 Eth 124
      dest.print(cumulativeInsolation, 0); dest.print(" "); dest.print(probeSeparator);

      timestamps[14] = micros();  //todo remove Ser 10272 Eth 916
      datalogfile.readBytes((byte *)&surgeTankLevel, sizeof(surgeTankLevel));      //todo remove
      timestamps[15] = micros();  //todo remove Ser 120 Eth 124
      dest.print(surgeTankLevel, 4); dest.print(" "); dest.print(probeSeparator);

      timestamps[16] = micros();  //todo remove Ser 9236 Eth 1848
      datalogfile.readBytes((byte *)&pumpRuntime, sizeof(pumpRuntime));
      timestamps[17] = micros();  //todo remove Ser 124 Eth 124
      dest.print(pumpRuntime, 0); dest.print(" "); // dest.print(probeSeparator);

      timestamps[18] = micros();  //todo remove Ser 6116 Eth 1848
      PumpState pumpState = getPumpState();
      timestamps[19] = micros();  //todo remove Ser 8 Eth 4
      datalogfile.readBytes((byte *)&pumpState, sizeof(pumpState));
      dest.print((int)pumpState, HEX); // dest.print(" "); // dest.print(probeSeparator);
      timestamps[20] = micros();  //todo remove Ser 2076 Eth 328

      dest.println();
      timestamps[21] = micros();  //todo remove Ser 2080 Eth 268
    }
  }
  for (int i =  1; i < 22; ++i) {
    Serial.print(i);
    Serial.print(":");
    Serial.println(timestamps[i] - timestamps[i-1]);
  }
}

Used !l on datastream to send $1000 records = 4096 and it took about 10 seconds (340 k or so)
