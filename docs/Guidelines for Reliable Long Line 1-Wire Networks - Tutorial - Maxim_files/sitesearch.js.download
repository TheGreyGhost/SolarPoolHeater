/*
	Standards Compliant Rollover Script
	Author : Lauren Kelly
	http://morphosinc.com/maxim/product.php
*/
$(document).ready(function(){
	$('#relResources .right-module').each(function(){
		var srcon = $(this).find('.imgover').attr('src');
        if(srcon){
            var ftypeon = srcon.substring(srcon.lastIndexOf('.'), srcon.length);
            var hsrcon = srcon.replace(ftypeon, '_o'+ftypeon);
            if($(this).find('.imgoveron').length == 0){
            $(this).find('.right-module-img').append('<img class="imgoveron" src="'+hsrcon+'" style="display:none; border:none;" />');
            $(this).hover(function(){
                $(this).find('.imgover').attr('style', 'display:none;');
                $(this).find('.imgoveron').attr('style', 'display:block; border:none;');
            },function(){
                $(this).find('.imgover').attr('style', 'display:block; border:none;');
                $(this).find('.imgoveron').attr('style', 'display:none;');
            });
            }
        }
	});
});
$(document).ready(
    function() {
		/* Search Text Field Dropdown Functions */
        $("#events-center-text-search").click(function() {
            $("#events-center-results").slideDown();
			$("#events-center-text-clear").show();
			$("#events-center-text-search").hide();
        });
		$("#events-center-text-search").click(function(){
			$("#events-center-show-img").toggleClass("rotate1 rotate2");
		});
		/* Results Link Dropdown Functions */
        $("#events-center-show").click(function() {
            $("#events-center-results").slideToggle();
        });
        if ($("html").hasClass("lt-ie10")) {
        	var events_deg=0;
            $("#events-center-text-search").click(function(){
            	events_deg+=180;
    			$("#events-center-show-img").rotate(events_deg);
    		});
    		$("#events-center-show").click(function(){
    			events_deg+=180;
    			$("#events-center-show-img").rotate(events_deg);
    		});
        }
        else{
            $("#events-center-text-search").click(function(){
    			$("#events-center-show-img").toggleClass("rotate1 rotate2");
    		});
    		$("#events-center-show").click(function(){
    			$("#events-center-show-img").toggleClass("rotate1 rotate2");
    		});
        }
        
        // New click rotation function to enable more than one on the same page with the same class ie. .extendablebutton
        $(document).on("click",".extendablebutton", function(){
            $(this).find("#events-center-show-img").toggleClass("rotate1 rotate2");
		});
        

});
/* Clear Search Functions */
var objDropDownMenu1 = document.getElementsByName("eventType")[0];
var objDropDownMenu2 = document.getElementsByName("regionFilter")[0];

function clearTextBox (form) {
    document.getElementById('textfield').value = '';
    alert("Clear Text Box");
	$("#events-center-text-clear").hide();
	$("#events-center-text-search").show();
}

function clearEventTypeFilter (form) {
    objDropDownMenu1.options[0].selected = true;
    alert("Clear Event Type Filter");
	$("#eventTypeAction").hide();
}

function clearRegionFilter (form) {
    objDropDownMenu2.options[0].selected = true;
    alert("Clear Region Filter");
	$("#regionAction").hide();
}



/* Product Family Function */
function eventTypeChanged(famValue) {
  alert("Event Type Filter: " + famValue);
	$("#eventTypeAction").show();
    $("#events-center-results").slideDown();
}

/* End Application Function */
function regionFilterChanged(appValue) {
  alert("Region Filter: " + appValue);
	$("#regionAction").show();
	$("#events-center-results").slideDown();	
}

/*!
 * Bootstrap-select v1.10.0 (http://silviomoreto.github.io/bootstrap-select)
 *
 * Copyright 2013-2016 bootstrap-select
 * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)
 */
!function(a,b){"function"==typeof define&&define.amd?define(["jquery"],function(a){return b(a)}):"object"==typeof exports?module.exports=b(require("jquery")):b(jQuery)}(this,function(a){!function(a){"use strict";function b(b){var c=[{re:/[\xC0-\xC6]/g,ch:"A"},{re:/[\xE0-\xE6]/g,ch:"a"},{re:/[\xC8-\xCB]/g,ch:"E"},{re:/[\xE8-\xEB]/g,ch:"e"},{re:/[\xCC-\xCF]/g,ch:"I"},{re:/[\xEC-\xEF]/g,ch:"i"},{re:/[\xD2-\xD6]/g,ch:"O"},{re:/[\xF2-\xF6]/g,ch:"o"},{re:/[\xD9-\xDC]/g,ch:"U"},{re:/[\xF9-\xFC]/g,ch:"u"},{re:/[\xC7-\xE7]/g,ch:"c"},{re:/[\xD1]/g,ch:"N"},{re:/[\xF1]/g,ch:"n"}];return a.each(c,function(){b=b.replace(this.re,this.ch)}),b}function c(a){var b={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c="(?:"+Object.keys(b).join("|")+")",d=new RegExp(c),e=new RegExp(c,"g"),f=null==a?"":""+a;return d.test(f)?f.replace(e,function(a){return b[a]}):f}function d(b,c){var d=arguments,f=b,g=c;[].shift.apply(d);var h,i=this.each(function(){var b=a(this);if(b.is("select")){var c=b.data("selectpicker"),i="object"==typeof f&&f;if(c){if(i)for(var j in i)i.hasOwnProperty(j)&&(c.options[j]=i[j])}else{var k=a.extend({},e.DEFAULTS,a.fn.selectpicker.defaults||{},b.data(),i);k.template=a.extend({},e.DEFAULTS.template,a.fn.selectpicker.defaults?a.fn.selectpicker.defaults.template:{},b.data().template,i.template),b.data("selectpicker",c=new e(this,k,g))}"string"==typeof f&&(h=c[f]instanceof Function?c[f].apply(c,d):c.options[f])}});return"undefined"!=typeof h?h:i}String.prototype.includes||!function(){var a={}.toString,b=function(){try{var a={},b=Object.defineProperty,c=b(a,a,a)&&b}catch(d){}return c}(),c="".indexOf,d=function(b){if(null==this)throw new TypeError;var d=String(this);if(b&&"[object RegExp]"==a.call(b))throw new TypeError;var e=d.length,f=String(b),g=f.length,h=arguments.length>1?arguments[1]:void 0,i=h?Number(h):0;i!=i&&(i=0);var j=Math.min(Math.max(i,0),e);return g+j>e?!1:-1!=c.call(d,f,i)};b?b(String.prototype,"includes",{value:d,configurable:!0,writable:!0}):String.prototype.includes=d}(),String.prototype.startsWith||!function(){var a=function(){try{var a={},b=Object.defineProperty,c=b(a,a,a)&&b}catch(d){}return c}(),b={}.toString,c=function(a){if(null==this)throw new TypeError;var c=String(this);if(a&&"[object RegExp]"==b.call(a))throw new TypeError;var d=c.length,e=String(a),f=e.length,g=arguments.length>1?arguments[1]:void 0,h=g?Number(g):0;h!=h&&(h=0);var i=Math.min(Math.max(h,0),d);if(f+i>d)return!1;for(var j=-1;++j<f;)if(c.charCodeAt(i+j)!=e.charCodeAt(j))return!1;return!0};a?a(String.prototype,"startsWith",{value:c,configurable:!0,writable:!0}):String.prototype.startsWith=c}(),Object.keys||(Object.keys=function(a,b,c){c=[];for(b in a)c.hasOwnProperty.call(a,b)&&c.push(b);return c}),a.fn.triggerNative=function(a){var b,c=this[0];c.dispatchEvent?("function"==typeof Event?b=new Event(a,{bubbles:!0}):(b=document.createEvent("Event"),b.initEvent(a,!0,!1)),c.dispatchEvent(b)):(c.fireEvent&&(b=document.createEventObject(),b.eventType=a,c.fireEvent("on"+a,b)),this.trigger(a))},a.expr[":"].icontains=function(b,c,d){var e=a(b),f=(e.data("tokens")||e.text()).toUpperCase();return f.includes(d[3].toUpperCase())},a.expr[":"].ibegins=function(b,c,d){var e=a(b),f=(e.data("tokens")||e.text()).toUpperCase();return f.startsWith(d[3].toUpperCase())},a.expr[":"].aicontains=function(b,c,d){var e=a(b),f=(e.data("tokens")||e.data("normalizedText")||e.text()).toUpperCase();return f.includes(d[3].toUpperCase())},a.expr[":"].aibegins=function(b,c,d){var e=a(b),f=(e.data("tokens")||e.data("normalizedText")||e.text()).toUpperCase();return f.startsWith(d[3].toUpperCase())};var e=function(b,c,d){d&&(d.stopPropagation(),d.preventDefault()),this.$element=a(b),this.$newElement=null,this.$button=null,this.$menu=null,this.$lis=null,this.options=c,null===this.options.title&&(this.options.title=this.$element.attr("title")),this.val=e.prototype.val,this.render=e.prototype.render,this.refresh=e.prototype.refresh,this.setStyle=e.prototype.setStyle,this.selectAll=e.prototype.selectAll,this.deselectAll=e.prototype.deselectAll,this.destroy=e.prototype.destroy,this.remove=e.prototype.remove,this.show=e.prototype.show,this.hide=e.prototype.hide,this.init()};e.VERSION="1.10.0",e.DEFAULTS={noneSelectedText:"Nothing selected",noneResultsText:"No results matched {0}",countSelectedText:function(a,b){return 1==a?"{0} item selected":"{0} items selected"},maxOptionsText:function(a,b){return[1==a?"Limit reached ({n} item max)":"Limit reached ({n} items max)",1==b?"Group limit reached ({n} item max)":"Group limit reached ({n} items max)"]},selectAllText:"Select All",deselectAllText:"Deselect All",doneButton:!1,doneButtonText:"Close",multipleSeparator:", ",styleBase:"btn",style:"btn-default",size:"auto",title:null,selectedTextFormat:"values",width:!1,container:!1,hideDisabled:!1,showSubtext:!1,showIcon:!0,showContent:!0,dropupAuto:!0,header:!1,liveSearch:!1,liveSearchPlaceholder:null,liveSearchNormalize:!1,liveSearchStyle:"contains",actionsBox:!1,iconBase:"glyphicon",tickIcon:"glyphicon-ok",showTick:!1,template:{caret:'<span class="caret"></span>'},maxOptions:!1,mobile:!1,selectOnTab:!1,dropdownAlignRight:!1},e.prototype={constructor:e,init:function(){var b=this,c=this.$element.attr("id");this.$element.addClass("bs-select-hidden"),this.liObj={},this.multiple=this.$element.prop("multiple"),this.autofocus=this.$element.prop("autofocus"),this.$newElement=this.createView(),this.$element.after(this.$newElement).appendTo(this.$newElement),this.$button=this.$newElement.children("button"),this.$menu=this.$newElement.children(".dropdown-menu"),this.$menuInner=this.$menu.children(".inner"),this.$searchbox=this.$menu.find("input"),this.$element.removeClass("bs-select-hidden"),this.options.dropdownAlignRight&&this.$menu.addClass("dropdown-menu-right"),"undefined"!=typeof c&&(this.$button.attr("data-id",c),a('label[for="'+c+'"]').click(function(a){a.preventDefault(),b.$button.focus()})),this.checkDisabled(),this.clickListener(),this.options.liveSearch&&this.liveSearchListener(),this.render(),this.setStyle(),this.setWidth(),this.options.container&&this.selectPosition(),this.$menu.data("this",this),this.$newElement.data("this",this),this.options.mobile&&this.mobile(),this.$newElement.on({"hide.bs.dropdown":function(a){b.$element.trigger("hide.bs.select",a)},"hidden.bs.dropdown":function(a){b.$element.trigger("hidden.bs.select",a)},"show.bs.dropdown":function(a){b.$element.trigger("show.bs.select",a)},"shown.bs.dropdown":function(a){b.$element.trigger("shown.bs.select",a)}}),b.$element[0].hasAttribute("required")&&this.$element.on("invalid",function(){b.$button.addClass("bs-invalid").focus(),b.$element.on({"focus.bs.select":function(){b.$button.focus(),b.$element.off("focus.bs.select")},"shown.bs.select":function(){b.$element.val(b.$element.val()).off("shown.bs.select")},"rendered.bs.select":function(){this.validity.valid&&b.$button.removeClass("bs-invalid"),b.$element.off("rendered.bs.select")}})}),setTimeout(function(){b.$element.trigger("loaded.bs.select")})},createDropdown:function(){var b=this.multiple||this.options.showTick?" show-tick":"",d=this.$element.parent().hasClass("input-group")?" input-group-btn":"",e=this.autofocus?" autofocus":"",f=this.options.header?'<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>'+this.options.header+"</div>":"",g=this.options.liveSearch?'<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"'+(null===this.options.liveSearchPlaceholder?"":' placeholder="'+c(this.options.liveSearchPlaceholder)+'"')+"></div>":"",h=this.multiple&&this.options.actionsBox?'<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn btn-default">'+this.options.selectAllText+'</button><button type="button" class="actions-btn bs-deselect-all btn btn-default">'+this.options.deselectAllText+"</button></div></div>":"",i=this.multiple&&this.options.doneButton?'<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm btn-default">'+this.options.doneButtonText+"</button></div></div>":"",j='<div class="btn-group bootstrap-select'+b+d+'"><button type="button" class="'+this.options.styleBase+' dropdown-toggle" data-toggle="dropdown"'+e+'><span class="filter-option pull-left"></span>&nbsp;<span class="bs-caret">'+this.options.template.caret+'</span></button><div class="dropdown-menu open">'+f+g+h+'<ul class="dropdown-menu inner" role="menu"></ul>'+i+"</div></div>";return a(j)},createView:function(){var a=this.createDropdown(),b=this.createLi();return a.find("ul")[0].innerHTML=b,a},reloadLi:function(){this.destroyLi();var a=this.createLi();this.$menuInner[0].innerHTML=a},destroyLi:function(){this.$menu.find("li").remove()},createLi:function(){var d=this,e=[],f=0,g=document.createElement("option"),h=-1,i=function(a,b,c,d){return"<li"+("undefined"!=typeof c&""!==c?' class="'+c+'"':"")+("undefined"!=typeof b&null!==b?' data-original-index="'+b+'"':"")+("undefined"!=typeof d&null!==d?'data-optgroup="'+d+'"':"")+">"+a+"</li>"},j=function(a,e,f,g){return'<a tabindex="0"'+("undefined"!=typeof e?' class="'+e+'"':"")+("undefined"!=typeof f?' style="'+f+'"':"")+(d.options.liveSearchNormalize?' data-normalized-text="'+b(c(a))+'"':"")+("undefined"!=typeof g||null!==g?' data-tokens="'+g+'"':"")+">"+a+'<span class="'+d.options.iconBase+" "+d.options.tickIcon+' check-mark"></span></a>'};if(this.options.title&&!this.multiple&&(h--,!this.$element.find(".bs-title-option").length)){var k=this.$element[0];g.className="bs-title-option",g.appendChild(document.createTextNode(this.options.title)),g.value="",k.insertBefore(g,k.firstChild),void 0===a(k.options[k.selectedIndex]).attr("selected")&&(g.selected=!0)}return this.$element.find("option").each(function(b){var c=a(this);if(h++,!c.hasClass("bs-title-option")){var g=this.className||"",k=this.style.cssText,l=c.data("content")?c.data("content"):c.html(),m=c.data("tokens")?c.data("tokens"):null,n="undefined"!=typeof c.data("subtext")?'<small class="text-muted">'+c.data("subtext")+"</small>":"",o="undefined"!=typeof c.data("icon")?'<span class="'+d.options.iconBase+" "+c.data("icon")+'"></span> ':"",p="OPTGROUP"===this.parentNode.tagName,q=this.disabled||p&&this.parentNode.disabled;if(""!==o&&q&&(o="<span>"+o+"</span>"),d.options.hideDisabled&&q&&!p)return void h--;if(c.data("content")||(l=o+'<span class="text">'+l+n+"</span>"),p&&c.data("divider")!==!0){var r=" "+this.parentNode.className||"";if(0===c.index()){f+=1;var s=this.parentNode.label,t="undefined"!=typeof c.parent().data("subtext")?'<small class="text-muted">'+c.parent().data("subtext")+"</small>":"",u=c.parent().data("icon")?'<span class="'+d.options.iconBase+" "+c.parent().data("icon")+'"></span> ':"";s=u+'<span class="text">'+s+t+"</span>",0!==b&&e.length>0&&(h++,e.push(i("",null,"divider",f+"div"))),h++,e.push(i(s,null,"dropdown-header"+r,f))}if(d.options.hideDisabled&&q)return void h--;e.push(i(j(l,"opt "+g+r,k,m),b,"",f))}else c.data("divider")===!0?e.push(i("",b,"divider")):c.data("hidden")===!0?e.push(i(j(l,g,k,m),b,"hidden is-hidden")):(this.previousElementSibling&&"OPTGROUP"===this.previousElementSibling.tagName&&(h++,e.push(i("",null,"divider",f+"div"))),e.push(i(j(l,g,k,m),b)));d.liObj[b]=h}}),this.multiple||0!==this.$element.find("option:selected").length||this.options.title||this.$element.find("option").eq(0).prop("selected",!0).attr("selected","selected"),e.join("")},findLis:function(){return null==this.$lis&&(this.$lis=this.$menu.find("li")),this.$lis},render:function(b){var c,d=this;b!==!1&&this.$element.find("option").each(function(a){var b=d.findLis().eq(d.liObj[a]);d.setDisabled(a,this.disabled||"OPTGROUP"===this.parentNode.tagName&&this.parentNode.disabled,b),d.setSelected(a,this.selected,b)}),this.tabIndex();var e=this.$element.find("option").map(function(){if(this.selected){if(d.options.hideDisabled&&(this.disabled||"OPTGROUP"===this.parentNode.tagName&&this.parentNode.disabled))return;var b,c=a(this),e=c.data("icon")&&d.options.showIcon?'<i class="'+d.options.iconBase+" "+c.data("icon")+'"></i> ':"";return b=d.options.showSubtext&&c.data("subtext")&&!d.multiple?' <small class="text-muted">'+c.data("subtext")+"</small>":"","undefined"!=typeof c.attr("title")?c.attr("title"):c.data("content")&&d.options.showContent?c.data("content"):e+c.html()+b}}).toArray(),f=this.multiple?e.join(this.options.multipleSeparator):e[0];if(this.multiple&&this.options.selectedTextFormat.indexOf("count")>-1){var g=this.options.selectedTextFormat.split(">");if(g.length>1&&e.length>g[1]||1==g.length&&e.length>=2){c=this.options.hideDisabled?", [disabled]":"";var h=this.$element.find("option").not('[data-divider="true"], [data-hidden="true"]'+c).length,i="function"==typeof this.options.countSelectedText?this.options.countSelectedText(e.length,h):this.options.countSelectedText;f=i.replace("{0}",e.length.toString()).replace("{1}",h.toString())}}void 0==this.options.title&&(this.options.title=this.$element.attr("title")),"static"==this.options.selectedTextFormat&&(f=this.options.title),f||(f="undefined"!=typeof this.options.title?this.options.title:this.options.noneSelectedText),this.$button.attr("title",a.trim(f.replace(/<[^>]*>?/g,""))),this.$button.children(".filter-option").html(f),this.$element.trigger("rendered.bs.select")},setStyle:function(a,b){this.$element.attr("class")&&this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi,""));var c=a?a:this.options.style;"add"==b?this.$button.addClass(c):"remove"==b?this.$button.removeClass(c):(this.$button.removeClass(this.options.style),this.$button.addClass(c))},liHeight:function(b){if(b||this.options.size!==!1&&!this.sizeInfo){var c=document.createElement("div"),d=document.createElement("div"),e=document.createElement("ul"),f=document.createElement("li"),g=document.createElement("li"),h=document.createElement("a"),i=document.createElement("span"),j=this.options.header&&this.$menu.find(".popover-title").length>0?this.$menu.find(".popover-title")[0].cloneNode(!0):null,k=this.options.liveSearch?document.createElement("div"):null,l=this.options.actionsBox&&this.multiple&&this.$menu.find(".bs-actionsbox").length>0?this.$menu.find(".bs-actionsbox")[0].cloneNode(!0):null,m=this.options.doneButton&&this.multiple&&this.$menu.find(".bs-donebutton").length>0?this.$menu.find(".bs-donebutton")[0].cloneNode(!0):null;if(i.className="text",c.className=this.$menu[0].parentNode.className+" open",d.className="dropdown-menu open",e.className="dropdown-menu inner",f.className="divider",i.appendChild(document.createTextNode("Inner text")),h.appendChild(i),g.appendChild(h),e.appendChild(g),e.appendChild(f),j&&d.appendChild(j),k){var n=document.createElement("span");k.className="bs-searchbox",n.className="form-control",k.appendChild(n),d.appendChild(k)}l&&d.appendChild(l),d.appendChild(e),m&&d.appendChild(m),c.appendChild(d),document.body.appendChild(c);var o=h.offsetHeight,p=j?j.offsetHeight:0,q=k?k.offsetHeight:0,r=l?l.offsetHeight:0,s=m?m.offsetHeight:0,t=a(f).outerHeight(!0),u="function"==typeof getComputedStyle?getComputedStyle(d):!1,v=u?null:a(d),w=parseInt(u?u.paddingTop:v.css("paddingTop"))+parseInt(u?u.paddingBottom:v.css("paddingBottom"))+parseInt(u?u.borderTopWidth:v.css("borderTopWidth"))+parseInt(u?u.borderBottomWidth:v.css("borderBottomWidth")),x=w+parseInt(u?u.marginTop:v.css("marginTop"))+parseInt(u?u.marginBottom:v.css("marginBottom"))+2;document.body.removeChild(c),this.sizeInfo={liHeight:o,headerHeight:p,searchHeight:q,actionsHeight:r,doneButtonHeight:s,dividerHeight:t,menuPadding:w,menuExtras:x}}},setSize:function(){if(this.findLis(),this.liHeight(),this.options.header&&this.$menu.css("padding-top",0),this.options.size!==!1){var b,c,d,e,f=this,g=this.$menu,h=this.$menuInner,i=a(window),j=this.$newElement[0].offsetHeight,k=this.sizeInfo.liHeight,l=this.sizeInfo.headerHeight,m=this.sizeInfo.searchHeight,n=this.sizeInfo.actionsHeight,o=this.sizeInfo.doneButtonHeight,p=this.sizeInfo.dividerHeight,q=this.sizeInfo.menuPadding,r=this.sizeInfo.menuExtras,s=this.options.hideDisabled?".disabled":"",t=function(){d=f.$newElement.offset().top-i.scrollTop(),e=i.height()-d-j};if(t(),"auto"===this.options.size){var u=function(){var i,j=function(b,c){return function(d){return c?d.classList?d.classList.contains(b):a(d).hasClass(b):!(d.classList?d.classList.contains(b):a(d).hasClass(b))}},p=f.$menuInner[0].getElementsByTagName("li"),s=Array.prototype.filter?Array.prototype.filter.call(p,j("hidden",!1)):f.$lis.not(".hidden"),u=Array.prototype.filter?Array.prototype.filter.call(s,j("dropdown-header",!0)):s.filter(".dropdown-header");t(),b=e-r,f.options.container?(g.data("height")||g.data("height",g.height()),c=g.data("height")):c=g.height(),f.options.dropupAuto&&f.$newElement.toggleClass("dropup",d>e&&c>b-r),f.$newElement.hasClass("dropup")&&(b=d-r),i=s.length+u.length>3?3*k+r-2:0,g.css({"max-height":b+"px",overflow:"hidden","min-height":i+l+m+n+o+"px"}),h.css({"max-height":b-l-m-n-o-q+"px","overflow-y":"auto","min-height":Math.max(i-q,0)+"px"})};u(),this.$searchbox.off("input.getSize propertychange.getSize").on("input.getSize propertychange.getSize",u),i.off("resize.getSize scroll.getSize").on("resize.getSize scroll.getSize",u)}else if(this.options.size&&"auto"!=this.options.size&&this.$lis.not(s).length>this.options.size){var v=this.$lis.not(".divider").not(s).children().slice(0,this.options.size).last().parent().index(),w=this.$lis.slice(0,v+1).filter(".divider").length;b=k*this.options.size+w*p+q,f.options.container?(g.data("height")||g.data("height",g.height()),c=g.data("height")):c=g.height(),f.options.dropupAuto&&this.$newElement.toggleClass("dropup",d>e&&c>b-r),g.css({"max-height":b+l+m+n+o+"px",overflow:"hidden","min-height":""}),h.css({"max-height":b-q+"px","overflow-y":"auto","min-height":""})}}},setWidth:function(){if("auto"===this.options.width){this.$menu.css("min-width","0");var a=this.$menu.parent().clone().appendTo("body"),b=this.options.container?this.$newElement.clone().appendTo("body"):a,c=a.children(".dropdown-menu").outerWidth(),d=b.css("width","auto").children("button").outerWidth();a.remove(),b.remove(),this.$newElement.css("width",Math.max(c,d)+"px")}else"fit"===this.options.width?(this.$menu.css("min-width",""),this.$newElement.css("width","").addClass("fit-width")):this.options.width?(this.$menu.css("min-width",""),this.$newElement.css("width",this.options.width)):(this.$menu.css("min-width",""),this.$newElement.css("width",""));this.$newElement.hasClass("fit-width")&&"fit"!==this.options.width&&this.$newElement.removeClass("fit-width")},selectPosition:function(){this.$bsContainer=a('<div class="bs-container" />');var b,c,d=this,e=function(a){d.$bsContainer.addClass(a.attr("class").replace(/form-control|fit-width/gi,"")).toggleClass("dropup",a.hasClass("dropup")),b=a.offset(),c=a.hasClass("dropup")?0:a[0].offsetHeight,d.$bsContainer.css({top:b.top+c,left:b.left,width:a[0].offsetWidth})};this.$button.on("click",function(){var b=a(this);d.isDisabled()||(e(d.$newElement),d.$bsContainer.appendTo(d.options.container).toggleClass("open",!b.hasClass("open")).append(d.$menu))}),a(window).on("resize scroll",function(){e(d.$newElement)}),this.$element.on("hide.bs.select",function(){d.$menu.data("height",d.$menu.height()),d.$bsContainer.detach()})},setSelected:function(a,b,c){c||(c=this.findLis().eq(this.liObj[a])),c.toggleClass("selected",b)},setDisabled:function(a,b,c){c||(c=this.findLis().eq(this.liObj[a])),b?c.addClass("disabled").children("a").attr("href","#").attr("tabindex",-1):c.removeClass("disabled").children("a").removeAttr("href").attr("tabindex",0)},isDisabled:function(){return this.$element[0].disabled},checkDisabled:function(){var a=this;this.isDisabled()?(this.$newElement.addClass("disabled"),this.$button.addClass("disabled").attr("tabindex",-1)):(this.$button.hasClass("disabled")&&(this.$newElement.removeClass("disabled"),this.$button.removeClass("disabled")),-1!=this.$button.attr("tabindex")||this.$element.data("tabindex")||this.$button.removeAttr("tabindex")),this.$button.click(function(){return!a.isDisabled()})},tabIndex:function(){this.$element.data("tabindex")!==this.$element.attr("tabindex")&&-98!==this.$element.attr("tabindex")&&"-98"!==this.$element.attr("tabindex")&&(this.$element.data("tabindex",this.$element.attr("tabindex")),this.$button.attr("tabindex",this.$element.data("tabindex"))),this.$element.attr("tabindex",-98)},clickListener:function(){var b=this,c=a(document);this.$newElement.on("touchstart.dropdown",".dropdown-menu",function(a){a.stopPropagation()}),c.data("spaceSelect",!1),this.$button.on("keyup",function(a){/(32)/.test(a.keyCode.toString(10))&&c.data("spaceSelect")&&(a.preventDefault(),c.data("spaceSelect",!1))}),this.$button.on("click",function(){b.setSize()}),this.$element.on("shown.bs.select",function(){if(b.options.liveSearch||b.multiple){if(!b.multiple){var a=b.liObj[b.$element[0].selectedIndex];if("number"!=typeof a||b.options.size===!1)return;var c=b.$lis.eq(a)[0].offsetTop-b.$menuInner[0].offsetTop;c=c-b.$menuInner[0].offsetHeight/2+b.sizeInfo.liHeight/2,b.$menuInner[0].scrollTop=c}}else b.$menuInner.find(".selected a").focus()}),this.$menuInner.on("click","li a",function(c){var d=a(this),e=d.parent().data("originalIndex"),f=b.$element.val(),g=b.$element.prop("selectedIndex");if(b.multiple&&c.stopPropagation(),c.preventDefault(),!b.isDisabled()&&!d.parent().hasClass("disabled")){var h=b.$element.find("option"),i=h.eq(e),j=i.prop("selected"),k=i.parent("optgroup"),l=b.options.maxOptions,m=k.data("maxOptions")||!1;if(b.multiple){if(i.prop("selected",!j),b.setSelected(e,!j),d.blur(),l!==!1||m!==!1){var n=l<h.filter(":selected").length,o=m<k.find("option:selected").length;if(l&&n||m&&o)if(l&&1==l)h.prop("selected",!1),i.prop("selected",!0),b.$menuInner.find(".selected").removeClass("selected"),b.setSelected(e,!0);else if(m&&1==m){k.find("option:selected").prop("selected",!1),i.prop("selected",!0);var p=d.parent().data("optgroup");b.$menuInner.find('[data-optgroup="'+p+'"]').removeClass("selected"),b.setSelected(e,!0)}else{var q="function"==typeof b.options.maxOptionsText?b.options.maxOptionsText(l,m):b.options.maxOptionsText,r=q[0].replace("{n}",l),s=q[1].replace("{n}",m),t=a('<div class="notify"></div>');q[2]&&(r=r.replace("{var}",q[2][l>1?0:1]),s=s.replace("{var}",q[2][m>1?0:1])),i.prop("selected",!1),b.$menu.append(t),l&&n&&(t.append(a("<div>"+r+"</div>")),b.$element.trigger("maxReached.bs.select")),m&&o&&(t.append(a("<div>"+s+"</div>")),b.$element.trigger("maxReachedGrp.bs.select")),setTimeout(function(){b.setSelected(e,!1)},10),t.delay(750).fadeOut(300,function(){a(this).remove()})}}}else h.prop("selected",!1),i.prop("selected",!0),b.$menuInner.find(".selected").removeClass("selected"),b.setSelected(e,!0);b.multiple?b.options.liveSearch&&b.$searchbox.focus():b.$button.focus(),(f!=b.$element.val()&&b.multiple||g!=b.$element.prop("selectedIndex")&&!b.multiple)&&b.$element.trigger("changed.bs.select",[e,i.prop("selected"),j]).triggerNative("change")}}),this.$menu.on("click","li.disabled a, .popover-title, .popover-title :not(.close)",function(c){c.currentTarget==this&&(c.preventDefault(),c.stopPropagation(),b.options.liveSearch&&!a(c.target).hasClass("close")?b.$searchbox.focus():b.$button.focus())}),this.$menuInner.on("click",".divider, .dropdown-header",function(a){a.preventDefault(),a.stopPropagation(),b.options.liveSearch?b.$searchbox.focus():b.$button.focus()}),this.$menu.on("click",".popover-title .close",function(){b.$button.click()}),this.$searchbox.on("click",function(a){a.stopPropagation()}),this.$menu.on("click",".actions-btn",function(c){b.options.liveSearch?b.$searchbox.focus():b.$button.focus(),c.preventDefault(),c.stopPropagation(),a(this).hasClass("bs-select-all")?b.selectAll():b.deselectAll()}),this.$element.change(function(){b.render(!1)})},liveSearchListener:function(){var d=this,e=a('<li class="no-results"></li>');this.$button.on("click.dropdown.data-api touchstart.dropdown.data-api",function(){d.$menuInner.find(".active").removeClass("active"),d.$searchbox.val()&&(d.$searchbox.val(""),d.$lis.not(".is-hidden").removeClass("hidden"),e.parent().length&&e.remove()),d.multiple||d.$menuInner.find(".selected").addClass("active"),setTimeout(function(){d.$searchbox.focus()},10)}),this.$searchbox.on("click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api",function(a){a.stopPropagation()}),this.$searchbox.on("input propertychange",function(){if(d.$searchbox.val()){var f=d.$lis.not(".is-hidden").removeClass("hidden").children("a");f=d.options.liveSearchNormalize?f.not(":a"+d._searchStyle()+'("'+b(d.$searchbox.val())+'")'):f.not(":"+d._searchStyle()+'("'+d.$searchbox.val()+'")'),f.parent().addClass("hidden"),d.$lis.filter(".dropdown-header").each(function(){var b=a(this),c=b.data("optgroup");0===d.$lis.filter("[data-optgroup="+c+"]").not(b).not(".hidden").length&&(b.addClass("hidden"),d.$lis.filter("[data-optgroup="+c+"div]").addClass("hidden"))});var g=d.$lis.not(".hidden");g.each(function(b){var c=a(this);c.hasClass("divider")&&(c.index()===g.first().index()||c.index()===g.last().index()||g.eq(b+1).hasClass("divider"))&&c.addClass("hidden")}),d.$lis.not(".hidden, .no-results").length?e.parent().length&&e.remove():(e.parent().length&&e.remove(),e.html(d.options.noneResultsText.replace("{0}",'"'+c(d.$searchbox.val())+'"')).show(),d.$menuInner.append(e))}else d.$lis.not(".is-hidden").removeClass("hidden"),e.parent().length&&e.remove();d.$lis.filter(".active").removeClass("active"),d.$searchbox.val()&&d.$lis.not(".hidden, .divider, .dropdown-header").eq(0).addClass("active").children("a").focus(),a(this).focus()})},_searchStyle:function(){var a={begins:"ibegins",startsWith:"ibegins"};return a[this.options.liveSearchStyle]||"icontains"},val:function(a){return"undefined"!=typeof a?(this.$element.val(a),this.render(),this.$element):this.$element.val()},changeAll:function(b){"undefined"==typeof b&&(b=!0),this.findLis();for(var c=this.$element.find("option"),d=this.$lis.not(".divider, .dropdown-header, .disabled, .hidden").toggleClass("selected",b),e=d.length,f=[],g=0;e>g;g++){var h=d[g].getAttribute("data-original-index");f[f.length]=c.eq(h)[0]}a(f).prop("selected",b),this.render(!1),this.$element.trigger("changed.bs.select").triggerNative("change")},selectAll:function(){return this.changeAll(!0)},deselectAll:function(){return this.changeAll(!1)},toggle:function(a){a=a||window.event,a&&a.stopPropagation(),this.$button.trigger("click")},keydown:function(c){var d,e,f,g,h,i,j,k,l,m=a(this),n=m.is("input")?m.parent().parent():m.parent(),o=n.data("this"),p=":not(.disabled, .hidden, .dropdown-header, .divider)",q={32:" ",48:"0",49:"1",50:"2",51:"3",52:"4",53:"5",54:"6",55:"7",56:"8",57:"9",59:";",65:"a",66:"b",67:"c",68:"d",69:"e",70:"f",71:"g",72:"h",73:"i",74:"j",75:"k",76:"l",77:"m",78:"n",79:"o",80:"p",81:"q",82:"r",83:"s",84:"t",85:"u",86:"v",87:"w",88:"x",89:"y",90:"z",96:"0",97:"1",98:"2",99:"3",100:"4",101:"5",102:"6",103:"7",104:"8",105:"9"};if(o.options.liveSearch&&(n=m.parent().parent()),o.options.container&&(n=o.$menu),d=a("[role=menu] li",n),l=o.$newElement.hasClass("open"),!l&&(c.keyCode>=48&&c.keyCode<=57||c.keyCode>=96&&c.keyCode<=105||c.keyCode>=65&&c.keyCode<=90)&&(o.options.container?o.$button.trigger("click"):(o.setSize(),o.$menu.parent().addClass("open"),l=!0),o.$searchbox.focus()),o.options.liveSearch&&(/(^9$|27)/.test(c.keyCode.toString(10))&&l&&0===o.$menu.find(".active").length&&(c.preventDefault(),o.$menu.parent().removeClass("open"),o.options.container&&o.$newElement.removeClass("open"),o.$button.focus()),d=a("[role=menu] li"+p,n),m.val()||/(38|40)/.test(c.keyCode.toString(10))||0===d.filter(".active").length&&(d=o.$menuInner.find("li"),d=o.options.liveSearchNormalize?d.filter(":a"+o._searchStyle()+"("+b(q[c.keyCode])+")"):d.filter(":"+o._searchStyle()+"("+q[c.keyCode]+")"))),d.length){if(/(38|40)/.test(c.keyCode.toString(10)))e=d.index(d.find("a").filter(":focus").parent()),g=d.filter(p).first().index(),h=d.filter(p).last().index(),f=d.eq(e).nextAll(p).eq(0).index(),i=d.eq(e).prevAll(p).eq(0).index(),j=d.eq(f).prevAll(p).eq(0).index(),o.options.liveSearch&&(d.each(function(b){a(this).hasClass("disabled")||a(this).data("index",b)}),e=d.index(d.filter(".active")),g=d.first().data("index"),h=d.last().data("index"),f=d.eq(e).nextAll().eq(0).data("index"),i=d.eq(e).prevAll().eq(0).data("index"),j=d.eq(f).prevAll().eq(0).data("index")),k=m.data("prevIndex"),38==c.keyCode?(o.options.liveSearch&&e--,e!=j&&e>i&&(e=i),g>e&&(e=g),e==k&&(e=h)):40==c.keyCode&&(o.options.liveSearch&&e++,-1==e&&(e=0),e!=j&&f>e&&(e=f),e>h&&(e=h),e==k&&(e=g)),m.data("prevIndex",e),o.options.liveSearch?(c.preventDefault(),m.hasClass("dropdown-toggle")||(d.removeClass("active").eq(e).addClass("active").children("a").focus(),m.focus())):d.eq(e).children("a").focus();else if(!m.is("input")){var r,s,t=[];d.each(function(){a(this).hasClass("disabled")||a.trim(a(this).children("a").text().toLowerCase()).substring(0,1)==q[c.keyCode]&&t.push(a(this).index())}),r=a(document).data("keycount"),r++,a(document).data("keycount",r),s=a.trim(a(":focus").text().toLowerCase()).substring(0,1),s!=q[c.keyCode]?(r=1,a(document).data("keycount",r)):r>=t.length&&(a(document).data("keycount",0),r>t.length&&(r=1)),d.eq(t[r-1]).children("a").focus()}if((/(13|32)/.test(c.keyCode.toString(10))||/(^9$)/.test(c.keyCode.toString(10))&&o.options.selectOnTab)&&l){if(/(32)/.test(c.keyCode.toString(10))||c.preventDefault(),o.options.liveSearch)/(32)/.test(c.keyCode.toString(10))||(o.$menuInner.find(".active a").click(),m.focus());else{var u=a(":focus");u.click(),u.focus(),c.preventDefault(),a(document).data("spaceSelect",!0)}a(document).data("keycount",0)}(/(^9$|27)/.test(c.keyCode.toString(10))&&l&&(o.multiple||o.options.liveSearch)||/(27)/.test(c.keyCode.toString(10))&&!l)&&(o.$menu.parent().removeClass("open"),o.options.container&&o.$newElement.removeClass("open"),o.$button.focus())}},mobile:function(){this.$element.addClass("mobile-device")},refresh:function(){this.$lis=null,this.liObj={},this.reloadLi(),this.render(),this.checkDisabled(),this.liHeight(!0),this.setStyle(),this.setWidth(),this.$lis&&this.$searchbox.trigger("propertychange"),this.$element.trigger("refreshed.bs.select")},hide:function(){this.$newElement.hide()},show:function(){this.$newElement.show()},remove:function(){this.$newElement.remove(),this.$element.remove()},destroy:function(){this.$newElement.before(this.$element).remove(),this.$bsContainer?this.$bsContainer.remove():this.$menu.remove(),this.$element.off(".bs.select").removeData("selectpicker").removeClass("bs-select-hidden selectpicker")}};var f=a.fn.selectpicker;a.fn.selectpicker=d,a.fn.selectpicker.Constructor=e,a.fn.selectpicker.noConflict=function(){return a.fn.selectpicker=f,this},a(document).data("keycount",0).on("keydown.bs.select",'.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="menu"], .bs-searchbox input',e.prototype.keydown).on("focusin.modal",'.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="menu"], .bs-searchbox input',function(a){a.stopPropagation()}),a(window).on("load.bs.select.data-api",function(){a(".selectpicker").each(function(){var b=a(this);d.call(b,b.data())})})}(a)});
//# sourceMappingURL=bootstrap-select.js.map
/**
 * Abstract localStorage to hide JSON operations.
 */
function Storage(key) {
    this.key = key;
    this._storage = window.localStorage;
}

Storage.prototype.set = function(value) {
    var str = JSON.stringify(value);
    return this._storage.setItem(this.key, str);
};

Storage.prototype.get = function() {
    var str = this._storage.getItem(this.key);
    return JSON.parse(str);
};


/**
 * Wrap an array (provides only a subset of operations)
 * to persist its content with the class Storage (see above)
 */
function ArrayStorage(key) {
    this._storage = new Storage(key);
}

ArrayStorage.prototype.get = function() {
    return this._storage.get() || [];
};

/**
 * decorator method to provide the JavaScript object to `func` and
 * then apply the changes to the storage
 */
ArrayStorage.prototype._wrap = function(func) {
    var arr = this.get();
    var output = func(arr);
    this._storage.set(arr);
    return output;
}

ArrayStorage.prototype.unshift = function(value) {
    return this._wrap(function(arr) {
        return arr.unshift(value);
    });
};

ArrayStorage.prototype.pop = function() {
    return this._wrap(function(arr) {
        return arr.pop();
    });
};

ArrayStorage.prototype.push = function(value) {
    return this._wrap(function(arr) {
        return arr.push(value);
    });
};


ArrayStorage.prototype.set = function(newArray) {
    return this._storage.set(newArray);
};
String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

//*****************************/
//  Start templates.js
//*****************************/
var templates = {};
//var lang=document.head.querySelector("[name=pathlanguage]").content;
var lang=getUrlLanguage();
if(lang == "ja")
    lang="jp";
if(lang=="zh")
    lang="cn";
var pdfServer = "http://pdfserv.maximintegrated.com/"+lang+"/ds/";
var datasheetServer = "https://datasheets.maximintegrated.com/"+lang+"/ds/";
var contentPath = "/content/maximintegrated";
templates.trimLinks = function(link) {
    if(link != null && link !="" && link != "undefined" && link != undefined ) {
        if(link.indexOf(".html") == -1)
            link += ".html";	
        return link.replace(/\/content\/maximintegrated\/.*?\//i,"/"+lang+"/");
    } else {
        return link;
    }
}

templates.buyButton = function(productLifeCycle, partNo) {
    if(productLifeCycle != "OBSOLETE" && productLifeCycle != "DEVELOPMENT" && productLifeCycle != "PRE-RELEASE") {
		return '<button type="button" class="btn btn-danger btn-xs rmargin12 uppercase addToCart" data-item-id= ""onclick=\'buy_cart("'+partNo+'","part","ProductSearch","0");\' >'+Granite.I18n.get("buy")+'</button>';
    }
    return "";
}

templates.productsLegacy = function(results) {
	var txt = '';
    results.forEach(function(data,i) {
		txt+='<div class="product-search-result-item row"><div class="col-lg-12">' +
		            '<div class="light-blue-bg padding12">' +
        			    '<div class="row">' +
				            '<div class="part-info-container">' +
					            '<div class="product-title col-md-12 col-lg-3">' +
						            '<a class="teal uppercase" href="' + data.parturl + '" target="_blank">' + data.partnum + '</a>' +
								'</div>' +
				                '<div class="product-description col-md-12 col-lg-9">' +
                					'<p>' + data.partdesc + '</p>' +
					                '<a data-toggle="modal" href="#pdfViewer" class="hide search-result-extra-info">' +
					                '<!--[if lte IE 8]><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.png" /><![endif]-->' +
                                    '<!--[if gt IE 8]><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.svg" /><![endif]-->' +
                                    '<!--[if !IE]> --><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.svg">' +
                                    '<!-- <![endif]--> '+Granite.I18n.get("datasheetText")+'</a>' +
				                '</div>' +
                			'</div>' +
		                '</div>' +
                	'</div>' +
                '</div>' +
                '</div>';
    });
    return txt;
}

templates.dsPDFViewer = function(data, index) {
    var isMobile = $(window).width() <= 990;
    var datasheet = data;

    if(datasheet && datasheet != undefined) {

		var returnHTML = "";
		
		if(datasheet.showModal) {
			returnHTML+='<a data-toggle="modal" id="datasheetLink" href="#modalDatasheet" onclick=""><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.png" />'+datasheet.menuLabel+'</a>';
			
			returnHTML+='<div class="modal fade" id="modalDatasheet" tabindex="-1" role="dialog" aria-labelledby="modalDatasheetLabel" aria-hidden="true">'+
						'<div class="modal-dialog">'+
							'<div class="modal-content">'+
								'<div class="modal-header">'+
									'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>'+
										'<h4 class="modal-title">'+Granite.I18n.get('datasheet')+'</h4>'+
											'</div>'+
											'<div class="modal-body">';
									
			if(datasheet.docGroupLabel !="") {
				returnHTML+='<span style="padding-left:5px">'+datasheet.docGroupLabel+'</span><br/>';
			}				
			returnHTML+='<table class="table-hover table-condensed">';
			var j=1;
			for(var i=0;i<datasheet.dataSheetList.length;i++) {
				var dataSheetlist=datasheet.dataSheetList;
				returnHTML+='<tr valign="top">';
				
				if(dataSheetlist[i].fileName.indexOf("en") > 1) {
					if(datasheet.language == "en" ){
						returnHTML+='<td style="width:150px;text-transform:capitalize;">'+ 
                      				dataSheetlist[i].title +'&nbsp;'+Granite.I18n.get('datasheet') +'</td>';
					} else {
						returnHTML+='<td style="width:70px;text-transform:capitalize;">'+ Granite.I18n.get("english")+'</td>';
					}
					
				} else {
					returnHTML+='<td style="width:70px;text-transform:capitalize;">'+ Granite.I18n.get('mylang')+'</td>';
				}
				returnHTML+='<td>'+
							'<a data-toggle="modal" href="javascript:void(0)" onclick="if($(window).width() <SMALL_SCREEN_WIDTH){ window.open(\''+dataSheetlist[i].fileName+'\');} else{window.open(\''+dataSheetlist[i].fileName+'\', \'_blank\');}">'+Granite.I18n.get('download')+'</a>'+
							'</td>';
							
				if(datasheet.language != "en" ) {
					returnHTML+='<td>'+  
								'<span class="smaller">Rev '+dataSheetlist[i].version+';&nbsp;'+dataSheetlist[i].date+'</span>';
								
					if( j>1 ){ 
						 if(dataSheetlist[i-1].version != dataSheetlist[i].version){
							returnHTML+='<br/> <span class="smallest">'+Granite.I18n.get('revisionnote')+'</span>';
						 }
					}
					j++;
					returnHTML+='</td>';		
				}
				returnHTML+='</tr>';
			}
			returnHTML+=' </table>';
			if(datasheet.errataList > 0) {
				returnHTML+='<br/>';
			}
			returnHTML+='<table class="table-hover table-condensed">';
			for(var i=0;i<datasheet.errataList.length;i++) {
				var errataList = datasheet.errataList;
				returnHTML+='<tr valign="top">'+
							'<td style="width:150px;">'+ Granite.I18n.get('errata')+''+errataList[i].partNumber+'</td>'+
							'<td>'+
							'<a data-toggle="modal" href="javascript:void(0)" onclick="if($(window).width() <SMALL_SCREEN_WIDTH){ window.open(\''+errataList[i].fileName+'\');} else{window.open(\''+errataList[i].fileName+'\', \'_blank\');}">'+errataList[i].title+'</a>'+
							'</td>'+
							'</tr>'
			}
			returnHTML+='</table>';
			if(datasheet.requestGroupLink) {
				returnHTML+='<br/><a style="padding-left:5px" href="'+datasheet.requestGroupLink+'">'+datasheet.requestGroupTitle+'</a><br/>';
			}
			returnHTML+='</div>'+
						'</div>'+
						'</div>'+
						'</div>';
		} else {
			if(datasheet.viewPdf) {
				returnHTML+='<a id="datasheetLink" href="'+datasheet.menuLink+'" '+(lang =="cn"?' target="_blank"':' target="_blank"')+' onclick="modalEvent(\''+datasheet.dataSheetTitle+'\');"><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.png" />'+datasheet.menuLabel+'</a>';
			} else {
				returnHTML+='<a id="datasheetLink" href="'+datasheet.menuLink+'" ><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.png" />'+datasheet.menuLabel+'</a>';
			}
		}
		return returnHTML;
	}	
};

templates.packageDetails = function(data) {
    var txt = "";
    if(data.package_details && data.package_details.pkg_code) {
        txt += (data.package_details.pkg_type != "" && data.package_details.pkg_type != undefined && data.package_details.pkg_type != "undefined") ? parseHtmlEntities(data.package_details.pkg_type)+";" : ((data.properties.InternalPackageCode != "" && data.properties.InternalPackageCode != "undefined" && data.properties.InternalPackageCode != undefined)) ? parseHtmlEntities(data.properties.InternalPackageCode) : "";
        txt += (data.package_details.pin_count != "" && data.package_details.pin_count != undefined && data.package_details.pin_count != "undefined") ? data.package_details.pin_count+"Pin;" : "";
        txt += (data.package_details.pkg_footprint_area != "" && data.package_details.pkg_footprint_area != undefined && data.package_details.pkg_footprint_area != "undefined") ? data.package_details.pkg_footprint_area+"mm<sup>2</sup>;" : "";
        txt += data.properties.NCNR == "true" ? " (NCNR)" : "";
    }
    else if(data.properties.InternalPackageCode) {
        txt += data.properties.InternalPackageCode;
        txt += data.properties.NCNR == "true" ? "; (NCNR)" : "";
    }
    return txt;
}

templates.products = function(results, partArray) {
    var txt = '';
    var langPrefix = lang !== "en" ? "/" + lang : "";
	var partArrayString = partArray.toString();
    var partArrayStr = partArrayString.replace(/\"/g,'');
    var rootPartArray = partArrayStr.split(",");
    rootPartArray.forEach(function(key,i) {
        if(results[key]) {
            var IsReferenceDesign = (results[key].pagepath.indexOf("/design/reference-design-center") > -1) ? true : false;
            var title = results[key].part_number ? results[key].part_number : results[key].title;
            var description = results[key].title;
            var data = {IsReferenceDesign:IsReferenceDesign, part_number: results[key].part_number, orderableinfo:results[key].orderableinfo, path: results[key].pagepath,  datasheetlink: results[key].datasheetlink };
            txt+=
                '<div class="product-search-result-item row"><div class="col-lg-12">' +
		            '<div class="light-blue-bg padding12">' +
        			    '<div class="row">' +
				            '<div class="part-info-container">' +
					            '<div class="product-title col-md-12 col-lg-3">' +
						            '<a class="teal uppercase" href="' + langPrefix + '/products/' + results[key].part_number  + '"'+(lang =="cn"?' target="_blank"':' target="_blank"')+' >' + title + '</a>' +
								'</div>' +
				                '<div class="product-description col-md-12 col-lg-9">' +
                					'<p>' + description + '</p>' +
				                '</div>' +
                			'</div>' +
		                '</div>' +
                        /** coment out printing of orderable parts for now... TODO: Need to get hybris order code to work. 
						templates.partOptions(data) +
                        //*/
                            templates.partOptions(data, i)+
                	'</div>' +
                '</div>' +
                '</div>';
        }
    });
    //console.log(txt);
    return txt;
};
templates.partOptions = function(data, index) {
    var txt = '';
    var isRefDes = data.IsReferenceDesign || false;
    var partNumber = data.part_number;
    var datasheetLink = data.datasheetlink;
    var datasheetlinkText = "";
    if(datasheetLink != "" && datasheetLink != undefined ) {
        datasheetlinkText = '<a data-toggle="modal" href="#modalDatasheet" onclick="javascript:fetchDataSheetModal( \''+data.part_number+'\',\''+data.path+'\')"><img src="/etc/designs/maximintegrated/_images/icons/datasheet_download_icon.png" />'+Granite.I18n.get("datasheet")+'</a>';	
    }

    var langPrefix = lang !== "en" ? "/" + lang : "";

    if (isRefDes) {
        partNumber = data.part_number.replace("#", "");
    }

    var datasheetUrlHtml = "";
    //if(! datasheetLink.endsWith("/ds/") && lang)
        datasheetUrlHtml = '<li id="'+data.part_number+'-datasheet">'+ fetchDataSheetModal(data.part_number,data.path) +'</li>' +
                    '<span id="product-link-seperator">|</span>';

    var links = !isRefDes ? '<ul class="no-display product-links-list search-result-extra-info">' +
                    datasheetUrlHtml +
                    '<li><a style=" text-transform: capitalize;" href="' + templates.trimLinks(data.path) + "/tb_tab1"+'"'+(lang =="cn"?' target="_blank"':' target="_blank"')+'>'+Granite.I18n.get("keyspecs")+'</a></li>' +
                    '<span id="product-link-seperator">|</span>' +
                        '<li><a style=" text-transform: capitalize;" '+(lang =="cn"?' target="_blank"':' target="_blank"')+' href="' + templates.trimLinks(data.path) + "/tb_tab2"+'">'+Granite.I18n.get("designresources")+'</a></li>' +
                    '<span id="product-link-seperator">|</span>' +
                    '<li><a style=" text-transform: capitalize;" '+(lang =="cn"?' target="_blank"':' target="_blank"')+' onclick="javascript:localStorage.setItem(\'rightNavPopup\', \'packaging-flyout-button\')" href="' + templates.trimLinks(data.path) +'" >'+Granite.I18n.get("relatedpackage")+'</a></li>' +
            '</ul>' : '';
     txt+=
        '<div class="product-extra-info-container row">' +
            '<div class="part-options col-sm-12 col-md-3 col-lg-3">';
    if(data.orderableinfo != "" && data.orderableinfo != undefined && data.orderableinfo != "undefined" || isRefDes){
            txt+=    '<a data-target="#' + partNumber + '" class="expand-part-options purple uppercase extendablebutton viewOrderblePartOption" data-click-triggered= "0" data-rootpart-no="'+partNumber+'" data-toggle="collapse"><span class="smallest">'+Granite.I18n.get("partoptionsText")+'</span>' +
                '<!--[if lte IE 8]><img src="/etc/designs/maximintegrated/_images/icons/ib_icon.png" id="events-center-show-img" class="rotate1" /><![endif]-->' +
                '<!--[if gt IE 8]><img src="/etc/designs/maximintegrated/_images/icons/ib_icon.svg" id="events-center-show-img" class="rotate1" /><![endif]-->' +
                '<!--[if !IE]> --><img src="/etc/designs/maximintegrated/_images/icons/ib_icon.svg" id="events-center-show-img" class="rotate1"><!-- <![endif]-->' +
                '</a>';
    }
     txt+=       '</div>' +
            '<div id="'+partNumber+'-loader" style="padding-top:20px"><img id="productsearch-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:none;padding-left: 50%;"></div>'+    
            '<div class="part-links-container col-sm-12 col-md-12 col-lg-9">' +
                links +
            '</div>' +
        '</div>' +
        '<div id="' + partNumber + '" class="collapse part-options-container"></div>';

    if (data.orderable_parts && data.orderable_parts.length > 0) {


        txt +='<div id="' + partNumber + '" class="collapse part-options-container">';
        var rootpart = data.part_number;

        var partoptions = data.orderable_parts;
        partoptions.forEach(function(data,i) {
            if(data.canSearch == "true"){
                txt +='<div id="" class="part-option-item row">' +
                    '<div class="part-title col-xs-12 col-sm-12 col-md-3">' +
                    '<a class="teal uppercase" '+(lang =="cn"?' target="_blank"':' target="_self"')+' href="'+ langPrefix + '/' + data.product_info_orderable_part+'">'+data.product_info_orderable_part+'</a>' +
                    '</div>' +
                    '<div class="part-description col-xs-12 col-sm-12 col-md-9">' +
                     templates.buyButton(data.ProductLifeCycle, data.product_info_orderable_part) +
                    '<p>'+
                    templates.packageDetails(data)+
                    '</p>' +
                    '</div>' +
                    '</div>' ;
            }            
        });
        txt+='</div>';
    } 
    return txt;
}

templates.addToDownload = function(data) {
    return ('<div class="download-asset-button download-asset-button-add" data-title="' + data.title + '" data-image="' + data.img_url_thumbnail + '" data-id="'+ data.hitpath +'"><span id="add-asset-icon" class="digital-asset-overlay-button glyphicon glyphicon-plus teal"></span></div>');
};

templates.assets = function(results) {
    var row, rows = [];
        columns = [];
    results.forEach(function(data, i) {
        if (i % 4 === 0) {
            row = $('<div />').addClass('row assets-row');
            rows.push(row);
        }
        var rowcontent = '<div class="col-sm-3 col-xs-6 asset-container">' +

                    '<div class="digital-asset-img">' +
                            ((data.videodetail)?'<a data-toggle="modal" class="'+data.videodetail.id+'img" duration="'+data.videodetail.duration+'" date="'+data.videodetail.date+'" href="javascript:void(0)" onclick="popupvideoasset(\''+data.videodetail.id+'\',\''+lang+'\')"><img class="img-responsive" src="' + data.img_url_thumbnail + '">'+
                        '<img class="play-icon1" style="top: 12px; left: 50px; width: 90px; height: 90px; position: absolute;" src="/etc/designs/maximintegrated/_images/video-play-button.png"></a>':'<div class="digital-asset-overlay">' +
                            '<div class="download-asset-button download-asset-button-download"  data-id="'+ data.hitpath +'"><span id="download-asset-icon" class="digital-asset-overlay-button glyphicon glyphicon-download-alt teal" aria-hidden="true"></span></div>'+
                            templates.addToDownload(data) +
                        '</div>' +
                        '<img class="img-responsive" src="' + data.img_url_thumbnail + '">') +
                    '</div>' +
                    '<div class="digital-asset-info" style="word-wrap:break-word;">' +
                        ((data.videodetail)?'<a data-toggle="modal"  class="'+data.videodetail.id+'info" duration="'+data.videodetail.duration+'" date="'+data.videodetail.date+'" href="javascript:void(0)" onclick="popupvideoasset(\''+data.videodetail.id+'\',\''+lang+'\')">':'<a href="#digital-asset-modal-' + data.index + '" data-toggle="modal" onclick="javascript:addShareonFly('+data.index+')">')+'<b>' + data.title + '</b></a>' +
                            ((data.videodetail)?'<p><b>Video </b> - ' + data.videodetail.duration + '</p>':'<p><b>' + data.extension + '</b> - ' + data.size + '</p>')+
                    '</div>' +

            '</div>' +

                '<div '+((data.videodetail)?' style="display:none"':'id="digital-asset-modal-' + data.index + '"')+' class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="pdfViewerLabel" aria-hidden="true">' +
                    '<div class="modal-dialog digital-asset-modal-container">' +
                      '<div class="modal-content">' +
                        '<div class="modal-body digital-asset-modal-body">' +
                            '<div class="digital-asset-modal-header">' +
                                '<p>'+data.title+'</p>' +
                                '<div class="digital-asset-modal-header-buttons">' +
                                    '<a style="float:left;" href="javascript:void(0)" data-title="'+ data.title +'" data-id="'+ data.hitpath +'" id="assetmodal-blog-'+ data.index +'"><img class="digital-asset-modal-icon" src="/etc/designs/maximintegrated/_images/icons/share_icon.svg"></a>' +
                                    '<a style="float:left;" href="javascript:void(0)" id="assetmodal-mark-'+ data.index +'"><img class="digital-asset-modal-icon" src="/etc/designs/maximintegrated/_images/icons/bookmark_icon.svg"></a>' +
                                    '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>' +
                                '</div>' +
                            '</div>' +

                            '<div class="digital-asset-modal-content">' +
                                '<div class="row">' +
                                    '<div class="digital-asset-modal-image-container col-md-6 col-sm-12 col-xs-12">' +
                                        '<img src="' + data.img_url_thumbnail2 + '">' +
                                    '</div>' +

                                    '<div class="digital-asset-modal-text-container col-md-6 col-sm-12 col-xs-12">' +
                                        '<h4>' + data.metadatatitle + '</h4>' +
                                        '<br>' +
                                        ((data.description)?'<p class="smaller '+((data.videodetail)?data.videodetail.id:'')+'desc">' + data.description + '</p>':'') +

                                        '<p class="smallest" style="word-wrap: break-word;">Tags: <span class="digital-asset-modal-tags">'+data.tags+'</span></p>'; 
       									 if(data.maximconfidential=="true"){
                                             rowcontent=rowcontent+'<div class="digital-asset-modal-confidential-container">'+
       										  '<img class="confiential-icon" src="/etc/designs/maximintegrated/_img/confidential.png">' +
                                                '<p class="confiential-text smallest red">Maxim Confidential: For internal use only</p> </div>';
                                         }
                                        rowcontent=rowcontent+'<br>' +
                                        '<p class="smallest">File Type: <span class="digital-asset-modal-file-type">' + data.extension + '</span></p>' +
                                        '<p class="smallest">Size: <span class="digital-asset-modal-file-size">' + data.size + '</span></p>' +
										 ((data.dimensions)?'<p class="smallest">Dimensions: ' + data.dimensions + '</p>':'') +
                                         ((data.applications)?'<p class="smallest">Applications: ' + data.applications + '</p>':'') +
                                         ((data.mxparts)?'<p class="smallest">Parts: ' + data.mxparts + '</p>':'') +
                                         ((data.typeName)?'<p class="smallest">Type: ' + data.typeName + '</p>':'') +

                                        '<div class="digital-asset-modal-download-buttons">' +
                                            '<div class="download-asset-button  download-asset-button-download" data-id="'+ data.hitpath +'" >' +
                                                '<span id="download-asset-icon"  class="digital-asset-overlay-button glyphicon glyphicon-download-alt teal" aria-hidden="true"></span>' +
                                            '</div>' +
                                            templates.addToDownload(data) +
                                        '</div>' +
                                    '</div>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                      '</div>' +
                    '</div>' +
                '</div>';
        row.append(rowcontent);
        //console.log(rowcontent);
    });

    return rows;
};

templates.sectionAssetHeader = function(data) {
	 var showAll=""; 
	    if(data.total>4){
	         showAll=data.showAll ? ' | <a href="#" id="assetShowAll">'+Granite.I18n.get("showmore")+' &gt;</a>' : ' | <a href="#" id="assetShowLess"> &lt; '+CQ.I18n.get("backtomain")+'</a>';
	    }
    return (
        '<p>' +
            '<span id="total-results-one">' + data.total + '</span> ' +
            '<b>' + data.title + '</b> '+Granite.I18n.get("resultsFor")+ ' <b>"<span class="product-query">' + decodeURIComponent(data.query) + '</span>"</b> | ' +
        Granite.I18n.get("viewing", [data.count, ((data.count+data.limit-1 < data.total)?data.count+data.limit-1:data.total), data.total]) +
            showAll +
        '</p>'
    );
};

templates.sectionProductHeader = function(data) {
    var showAllText = data.showAllText || $("#product-results-container").data("show-all-text") || Granite.I18n.get("showmore");
    var showAll = data.showAllProducts == "0" ? ' | <a href="#" id="showAllProducts">'+ showAllText + '&gt;</a>' : ' | <a href="#" id="hideAllProducts"> &lt; '+Granite.I18n.get("backtomain")+'</a>';
    var title = data.title !== undefined ? data.title : '';
    return (
        '<p>' +
            '<span id="total-results-one">' + data.total + '</span> ' +
            '<b>' + title + '</b> '+Granite.I18n.get("resultsFor")+ ' <b>"<span class="product-query">' + decodeURIComponent(data.query) + '</span>"</b> | ' +
            '<span id="show-product-range">'+Granite.I18n.get("viewing", [data.min, data.max, data.total])+'</span>' +
            '<span id="show-more-hide-less-productsection">'+showAll +'</span>'+
        '</p>'
    );
};

templates.sectionHeader = function(data) {
    console.log(data);
    var showAllText = data.showAllText || Granite.I18n.get("showmore");
    if(data.count == parseInt($("#category-search-results .js-section-results").data('show-more-count')))
		showAllText = data.showLessText || Granite.I18n.get("showLess");
    else 
		showAllText = data.showAllText || Granite.I18n.get("showmore");
    var showAll = data.showAll ? ' | <a href="#" id="categoriesShowAll">'+showAllText +'&gt;</a>' : ' |  <a href="#" id="categoriesShowAll"> &lt; '+Granite.I18n.get("backtomain")+'</a>';
    var title = data.title !== undefined ? data.title : '';
    return (
        '<p>' +
            '<span id="total-results-one">' + data.total + '</span> ' +
            '<b>' + title + '</b> '+Granite.I18n.get("resultsFor")+ ' <b>"<span class="product-query">' + decodeURIComponent(data.query) + '</span>"</b> | ' +
            Granite.I18n.get("viewing", [window.parameters.sp_n, data.count, data.total])  +
            showAll +
        '</p>'
    );
};

templates.noResults = function() {
	return ('<p>'+Granite.I18n.get("noResults")+'</p>');
}

templates.capitalize = function (text) {
    var returntext = "";
    if (typeof text !=='undefined'){
	var arrayOfText = text.split('/');
    for (var i = 0; i < arrayOfText.length; i++) {
        if (i>0) {
            returntext +="<br/>"
        }
        if (arrayOfText[i].indexOf('mvp')==-1) {
			returntext+= "" + arrayOfText[i].capitalize();
        }
    }
    }
    return returntext;
}

templates.categories = function(results) {
    //console.log(results);
    return results.map(function(data) {
        //console.log(data);
        var showIcons = showCategoryIcons;
        var imageSection = "";
		var imagepath = "";
        var imagealt = "";

        if (showIcons) {
            var icon = templates.getIconFromUrl(data.loc);
            if(icon) {
            if(icon.iconpath)
            	imagepath = icon.iconpath;
            if(icon.iconname)
            	imagealt = templates.capitalize(icon.iconname);
            }

            imagealt = imagealt.trim();

            var videodetailid,videodetailduration,videodetaildate,videodetailimage;

            if(data.loc.indexOf("assetdetailpage") != -1 && data["video-id"] != undefined && data["video-id"] != ""){

                 videodetailid=data["video-id"];
                 videodetailduration=data["video-duration"];
                 videodetaildate=data["created-date"];
                 videodetailimage=data["asset-path"];

				imageSection = '<div class="category-img searchimgWrap">' +
                    (videodetailid != ""?'<a data-toggle="modal" class="'+videodetailid+'gimg" duration="'+videodetailduration+'" date="'+videodetaildate+'" href="javascript:void(0)" onclick="popupvideogeneral(\''+videodetailid+'\',\''+lang+'\')"><img class="img-responsive" src="' + videodetailimage + '">'+
                     '<img class="play-icon1" style="top: 0px; left: -8px; width: 90px; height: 90px; position: absolute;" src="/etc/designs/maximintegrated/_images/video-play-button.png"></a>':'')+'</div>';
            }else{
				imageSection = '<div class="category-img searchimgWrap">' +
                            '<img class="img-responsive" alt="'+imagealt+'" src="' + imagepath + '">' +
                                '<p class="searchimgDescription">'+imagealt+'</p>' +
                        '</div>';
            }
        }
        var pattern = new RegExp("\/newsroom\/[0-9]{4}\/");
		var isPressReleasePage = pattern.test(data.loc);

        if(isPressReleasePage === true) {
            var index = data.loc.indexOf(".html");
            data.loc = data.loc.substring(0, index) + ".popup" + data.loc.substring(index, data.loc.length);
        }

        return (
            '<div class="category-search-result-item row">' +
                '<div class="col-lg-12">' +
                    '<div class="category-item-container">' +
                        imageSection +
            '<div class="category-info '+(data.loc.indexOf("assetdetailpage") != -1 && data["video-id"] != undefined && data["video-id"] != ""?videodetailid+'ginfo">':'" >')+
            (data.loc.indexOf("assetdetailpage") != -1 && data["video-id"] != undefined && data["video-id"] != ""?'<a data-toggle="modal" class="'+videodetailid+'gimg" duration="'+videodetailduration+'" date="'+videodetaildate+'" href="javascript:void(0)" onclick="popupvideogeneral(\''+videodetailid+'\',\''+lang+'\')">'+
                       '<b>'+data.title +'</b></a> (Video, ' + videodetailduration + ')</span>':'<a href="'+data.loc+'"'+(lang =="cn"?' target="_blank"':'')+'><b>' + data.title + '</b></a>')+
                      '<p class="category-description '+(data.loc.indexOf("assetdetailpage") != -1 && data["video-id"] != undefined && data["video-id"] != ""?videodetailid+'gdesc">':'">') + data.description + '</p>' +
                        '</div>' +
                    '</div>' +
                '</div>' +
            '</div>'
        );
    });
};

var contenttypeicons = {};
templates.getIconFromUrl = function(url) {
    var returnIcon = {};
    var filetype= "";
	for (var i = 0; i < categoryicons.length; i++) {
		if (categoryicons[i].iconname.startsWith("filetype")) {
             var tmp_array = categoryicons[i].iconname.split("/");
             filetype= tmp_array[1];
             contenttypeicons[filetype] = categoryicons[i];
        }
        if (url.indexOf(categoryicons[i].iconname) > -1) {
            returnIcon = categoryicons[i];
        }
    }
    if(!returnIcon.iconpath)
		returnIcon = contenttypeicons[filetype];
    return returnIcon;
}

templates.determineCategoryImage = function(url) {
    var returnIconName = templates.getIconFromUrl(url).iconpath;

    if (typeof returnIcon === 'undefined' || returnIcon == '') {
		var urlfiletype = url.split(".")[3];
        returnIconName = contenttypeicons[urlfiletype];
    }
    if (typeof returnIcon === 'undefined' || returnIcon == '' ) {
        var urlfiletype = 'default';
		returnIconName =contenttypeicons[urlfiletype];
    }

	return returnIconName;
}


templates.asset = function(assets) {
    return (
        '<div class="download-item">' +
            '<input class="download-item-checkbox" type="checkbox" name="select-all" value="'+ assets.id +'">' +
            '<img class="asset-to-download-picture" src="' + assets.img + '">' +
            '<span class="asset-to-download-title">'  + assets.title + '</span>' +
        '</div>'
    );
};

templates.filters = function(filters, depth, hidden,parentcount) {
    var $ul;
    //console.log('writing filters');    
    var copiedObject = jQuery.extend(true, {}, filters);
    //console.log(copiedObject);
    depth = depth || 0;
    if (filters) {
        $ul = $('<ul />');

        if(hidden === true ){
            //$ul.hide();
        }
        filters.map(function(filter, index) {

            var $li = templates.filter(filter, depth, parentcount);
            if ($li) {
	            $li.append(templates.filters(filter.children, depth + 1, filter.hidden && !filter.active, filter.count));
            	$ul.append($li);
            }
        });
    }
    return $ul;
};

function indent(length) {
    var output = ''
    for (var i = 0; i < length; i += 1) {
        output += ' ';
    }
    return output;
}

templates.filter = function(filter, depth, parentcount) {
    //console.log(indent(depth * 2),  filter.name, filter.path.join('-'), {active: filter.active, exact: filter.exact, checked: filter.checked});
   // console.log(filter.name + " - " + filter.countout + " - " +filter.count);
    var hide = "";

    //console.log(filter.name + " count out" + filter.countout);
    if (filter.countout == 0 && depth >0) { // && parentcount ==0) {
        return false;
    }    
	var filtercount = "";
    if (depth > 0 ) {
		var count = "";
		if(filter.name == "ref-design" && refDesignCount != undefined && refDesignCount != 0)
			count = +filter.countout + +refDesignCount;
		else
			count = filter.countout;
		filtercount = " (" + count + ")";
    }
    var childrencountoutsum = 0;
    if (filter.children) {
        for (var i=0;i <filter.children.length;i++) {
            var aChild = filter.children[i];
            childrencountoutsum+=aChild.countout;

        }
    }
	var linktext = filter.displayname;
    var urllanguage = getUrlLanguage();
    if (urllanguage ==='en') {
		linktext = filter.displayname;
    } else if ((urllanguage ==='ja' || urllanguage ==='jp')&& filter.displayname_japanese) {
		linktext = filter.displayname_japanese;
    } else if ((urllanguage ==='cn' || urllanguage ==='zh')&& filter.displayname_chinese) {
		linktext = filter.displayname_chinese;
    }

    var disabledstyle = "";
    if (filter.countout<=0 && !filter.checkbox) {
    	disabledstyle = 'color:gray;'
    }
    var filterClass = "js-filter";
    var checked = "";
    var queryString  = $("input#search-bar").val(); 
    if(filter.checkbox) {
        filterClass="js-checkbox-filter";
        //console.log(filter.name);
        //console.log(window.parameters.sp_q_exact_3);
        //console.log(checked);

        if ((filter.countout<=0 || filter.countout == undefined) && filter.currentdepth <= 0 ) {
    		//disabledstyle = 'color:gray;'
        } 
        if(filter.count > 0 && filter.countout<=0 && childrencountoutsum <= 0 && filter.currentdepth <= 0)
			disabledstyle = 'color:gray;'

        if((filter.count <= 0 || filter.count == undefined) && filter.children == undefined && filter.currentdepth <= 0 ) {
            disabledstyle = 'color:gray;';
        }

        if(filter.name && window.parameters.sp_q_exact_7) {
            var checkFilterArray = window.parameters.sp_q_exact_7.split("|");
            filter.checked = false;
            checkFilterArray.forEach(function(key){
                if(filter.name === key) {
                    checked = "checked=true";
                    filter.exact = true;
                    filter.checked = true;
                }
            });
            /*var regex = new RegExp( filter.name, 'g' );
            if(window.parameters.sp_q_exact_3.match(regex)) {                
                checked = "checked=true";
            } */

        }
    }
    var $a = $('<a style="'+disabledstyle+'" data-id="'+filter.name+'" data-count="'+filter.count+'"/>').html(linktext +   filtercount );
	var $label = $('<label style="'+hide+'"  data-id="'+filter.name+'"  data-count="'+filter.count+'"/>').addClass(filterClass).data('path', filter.strPath);
    $label.append($a);

    var $li = $('<li id="'+filter.name+'" style="'+hide+'" />').css(filter.style||{})
        .toggleClass('exact', filter.exact === true)
        .toggleClass('show', filter.show === true)
        .toggleClass('active', filter.active === true)

    var $expand = $('<img />').attr('src', '/etc/designs/maximintegrated/_images/icons/ib_icon.svg').addClass('expand');

    if (depth === 0) {
        $expand.addClass('opened')
    } else if (!filter.checkbox && childrencountoutsum > 0) {
        if (filter.name =='events') {
			console.log(filter.name);
        }
        if (filter.back) {
            $a.prepend('&lt; ');
        } else if (filter.next) {
            $a.append(' &gt;');
        }
    } else {
        $li.addClass('leave');
    }

    if (filter.checkbox && depth !== 0) {
        var $checkbox = $('<input type="checkbox" '+checked+' data-id="'+filter.name+'" />')
            .data('path', filter.strPath)            
            .prop('indeterminate', filter.indeterminate);
        $label.prepend($checkbox);
    }

    $li.append($label);
    if (depth === 0 || filter.checkbox && (filter.next || filter.back)) {
        if (filter.active){
            $expand.addClass('opened');
        }
        if (filter.countout >0 && !filter.checkbox) {
        	$label.append($expand);
        } else if(filter.checkbox && filter.count > 0 && childrencountoutsum > 0 && filter.children != undefined   && filter.currentdepth <= 0) {
			$label.append($expand);
        } else if(filter.checkbox && filter.countout > 0 && childrencountoutsum > 0 && filter.children != undefined && filter.currentdepth <= 0) {
            $label.append($expand);
        }

        $label.on('click', function(evt) {
            if ($(evt.target).attr('type') === 'checkbox') {
                return true;
            }
            var $img = $(this).find('img');
            $img.toggleClass('opened');
            var $child = $(this).next('ul'),
                $children = $child.find('> li');
            if ($children.is(':visible')) {
                $child.slideUp(function() {
                    $children.hide();
                });
            } else {
                $child.hide();
                $children.show();
                $child.slideDown();
            }
            return false;
        });
    }
    if(filter.hidden === true && !filter.active){
        $expand.removeClass('opened');
    }
    return $li;
};


templates.crumb = function(data) {
    var $spacer = $('<div class="ib-spacer">â€º</div>');
    var $crumb = $('<div />').addClass('ib-breadcrumb js-filter teal').data('path', data.strPath).html(data.name).css("cursor","pointer");
    return [$spacer, $crumb];
};



templates.assetfilterOption = function(asset,category,checkbox) {

    	var linktext = asset.displayName;
        var urllanguage = getUrlLanguage();
        if (urllanguage ==='en') {
            linktext = asset.displayName;
        } else if ((urllanguage ==='ja' || urllanguage ==='jp')&& asset.displayname_japanese) {
            linktext = asset.displayname_japanese;
        } else if ((urllanguage ==='cn' || urllanguage ==='zh')&& asset.displayname_chinese) {
            linktext = asset.displayname_chinese;
        }

    	var filterClass = "js-filter";
        var checked = "";
        if(checkbox) {
         var filterClass="js-checkbox-filter";
        if(asset.name && window.parameters.sp_q_exact_3) {
            var regex = new RegExp( asset.name, 'g' );
            if(window.parameters.sp_q_exact_3.match(regex)) {
                checked = "checked=true";
            }
        }
       }

		var $li = $('<li class="show" />');
        var $a = $('<a  data-id="'+asset.name+'" data-count="'+asset.count+'"/>').html(linktext+" ("+asset.count+")");
	    var $label = $('<label category="'+category+'"  data-id="'+asset.name+'"  data-count="'+asset.count+'"/>').addClass(filterClass).data('path', asset.strPath);
        $label.append($a);

    	if (checkbox) {
            var $checkbox = $('<input type="checkbox" '+checked+' />')
                .data('path', asset.strPath)
                .prop('checked', asset.exact || asset.checked)
                .prop('indeterminate', asset.indeterminate);
            $label.prepend($checkbox);
        }
    	$li.append($label);
		return $li;

};

function addShareonFly(varindex){
    var root = location.protocol + '//' + location.host; 
    var bookmark=$("#assetmodal-blog-"+varindex);
    var modalwindow=$("#digital-asset-modal-"+varindex);
    $(".digital-asset-modal-container .modal-body.digital-asset-modal-body").css("height","auto");
    modalwindow.on('click',function(e){
    	 if(e.target.className=="modal-dialog digital-asset-modal-container"){
 			modalwindow.find("button").click();
             modalwindow.unbind('click');
         }
    });

    shareByAddthis('#assetmodal-blog-'+varindex, bookmark.attr("data-title"), root+bookmark.attr("data-id"), true);
}

$(document).on("click", ".viewOrderblePartOption", function(){
	var partNo = $(this).data("rootpart-no");
    if($(this).data("click-triggered") == "0") {
        $('div#'+partNo+'-loader img#productsearch-spinner').css("display", "block");
    	fetchOrderableParts(partNo);
        $(this).data("click-triggered", "1");
    }
});

templates.checkRochester = function(status, partNo){
    var txt = "";
    if(status == "OBSOLETE") 
        txt = '<button type="button" class="btn btn-purple btn-xs rmargin12 uppercase" data-item-id="'+partNo+'" onclick="redirect_rochester(\''+partNo+'\');">'+Granite.I18n.get("checkRochester")+"</button>";

	return txt;
};


function redirect_rochester(part_no){        
    var url = 'https://api.rocelec.com/parts/MAX/1?callback=callback&q='+ encodeURIComponent(part_no)  +'&key=Z3kk1y*';
    
    $.ajax({
        type: 'GET',
        url: url,
        async: false,
        jsonpCallback: 'callback',
        contentType: "application/json",
        dataType: 'jsonp',
        success: function(json) {
            if(json.parts[0] != undefined){
                if('permalink' in json.parts[0]){
                    var re = new RegExp("#", 'g');
                    var permalLink = json.parts[0].permalink;
                    permalLink = permalLink.replace(re, "%23");
                    window.open(permalLink,'_blank');     
                }
                else{
                    bootbox.alert('Rochester currently does not carry this part, but you can contact them <a href="https://www.rocelec.com/about/contact" target="_blank">here </a> to see if they are able to procure it. If not, please <a href="https://www.maximintegrated.com/en/support/overview.html/TechSupportForm" target="_blank">contact our technical applications engineers</a> , who can help in finding a similar device you could use as a replacement.');
                }
            }
            else{
                bootbox.alert('Rochester currently does not carry this part, but you can contact them <a href="https://www.rocelec.com/about/contact" target="_blank">here </a> to see if they are able to procure it. If not, please <a href="https://www.maximintegrated.com/en/support/overview.html/TechSupportForm" target="_blank">contact our technical applications engineers</a> , who can help in finding a similar device you could use as a replacement.');
            }
            
        },
        error: function(e) {
            console.log(e.message);
        }
    });
    
    
}

function fetchOrderableParts(partnumber){
   // $('#'+partnumber).html('<img id="productsearch-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
   $.ajax(
        { url: "/content/maximintegrated/en/appservice/productservice/_jcr_content.orderableparts.json",
          async: false,
          method:'GET',
		  headers: {
			'Cache-Control': 'max-age=172800' 
		  },
          data: {part_number:partnumber},
          success: function(data) {
            var orderabletxt="";//'<div id="' +partnumber+ '" class="collapse part-options-container">';

            var partoptions = data.Orderable_Part_Numbers;
			var partStatusBuyable = [];
            var partStatusNotBuyable = [];  
			data.Orderable_Part_Numbers.forEach(function(data, i){
				if(data.properties.ProductLifeCycle == "PRODUCTION" || data.properties.ProductLifeCycle == "LAST TIME BUY")
					partStatusBuyable.push(data);
                else
					partStatusNotBuyable.push(data);
				
			});
		    var langPrefix = lang !== "en" ? "/" + lang : "";
			console.log(partStatusBuyable);
            console.log(partStatusNotBuyable);
            partStatusBuyable.forEach(function(data,i) {
                orderabletxt +='<div id="" class="part-option-item row">' +
                        '<div  class="part-title col-xs-12 col-sm-12 col-md-3">' +
                        '<a style="margin-left:8px" class="teal uppercase" target="_blank" href="'+  '/products/' + data.properties.product_info_root_part+'">'+data.properties.product_info_orderable_part+'</a>' +
                        '</div>' +
                        '<div class="part-description col-xs-12 col-sm-12 col-md-9">' +
                         templates.buyButton(data.properties.ProductLifeCycle, data.properties.product_info_orderable_part) +
                        '<p>'+
                          templates.packageDetails(data)+
						templates.checkRochester(data.properties.ProductLifeCycle, data.properties.product_info_orderable_part)+
                        '</p>' +
                        '</div>' +
                       '</div>' ;
                  });
            partStatusNotBuyable.forEach(function(data,i) {
                orderabletxt +='<div id="" class="part-option-item row">' +
                        '<div  class="part-title col-xs-12 col-sm-12 col-md-3">' +
                        '<a style="margin-left:8px" class="teal uppercase" target="_blank" href="'+ '/products/' + data.properties.product_info_root_part+'">'+data.properties.product_info_orderable_part+'</a>' +
                        '</div>' +
                        '<div  class="part-description col-xs-12 col-sm-12 col-md-9">' +
                         templates.buyButton(data.properties.ProductLifeCycle, data.properties.product_info_orderable_part) +
                        '<p>'+
                          templates.packageDetails(data)+
						templates.checkRochester(data.properties.ProductLifeCycle, data.properties.product_info_orderable_part)+
                        '</p>' +
                        '</div>' +
                       '</div>' ;
                  });              
                  $("div#"+partnumber+"-loader img#productsearch-spinner").hide();
				  $('#productsearch-spinner').remove();
                 $('#'+partnumber).html('').html(orderabletxt);
                 }, 
         		error: function(){
         			$("div#"+partnumber+"-loader img#productsearch-spinner").hide();
         			console.log('something went wrong in Section.prototype.fetchFunction');
           		 }}
             );
}

function fetchDataSheetModal(part, path){
    var returnHtml= "";
    path = path.replace("#", "%23");
     $.ajax(
        { url: "/content/maximintegrated/en/appservice/productservice/_jcr_content.loaddatasheetdetails.json?path="+path,
          async: false,
          method:'GET',
		  headers: {
			'Cache-Control': 'max-age=172800' 
		  },		  
          success: function(data) {
         	returnHtml = templates.dsPDFViewer(data,0);
        }
          });
    //$("#"+part+"-datasheet").html(returnHtml);
    //$("#"+part+"-datasheet #datasheetLink").trigger("click");
    return returnHtml;
}
//*****************************/
//  END templates.js
//*****************************/


var sitesearch = '/content/maximintegrated/' + getPublicUrlLanguage() + '/sitesearch.external.html';
var autocompleteurl = 'http://localhost:8888/autocomplete/sp10/05/0e/9b/';
var productsearchurl = '/bin/ProductCatalogSearchServlet';
var newProductSearchUrl = '/bin/productsearch';
var localhostsearch = 'http://localhost:8888/search/';
var categorysearchurl = localhostsearch;
var snpAccountNo = "sp10050e9b";
var snpEnvironment = "staged";
var qasearch = 'https://www.maximintegrated.com/snpsearch/';
var filterdepths = ['category','subcategory','subsubcategory','s3category','s4category','s5category','s6category'];
var allfilters =['category','subcategory','subsubcategory','s3category','s4category','s5category','s6category','keywords'];
var productTotalResult = 0;
var rootPartsArray = [];
var productsearchurl_secondary = '/content/maximintegrated/'+getPublicUrlLanguage()+'/appservice/productservice/_jcr_content.searchproductskeywords.json';
var assetsearchurl = '/content/maximintegrated/'+getPublicUrlLanguage()+'/appservice/productservice/_jcr_content.searchassets.json';
$.cookie('assetsharecomploc',window.assetspathcug);// this assetspathcug is being added to the window by the digital assets component
var MXdebug = false;
var isPublish = 1;
var domain = "https://www.maximintegrated.com";
if (isPublish) {

    productsearchurl_secondary = domain+'/' + getPublicUrlLanguage() + '/appservice/productservice/_jcr_content.searchproductskeywords.json';
    assetsearchurl = domain+'/' + getPublicUrlLanguage() + '/appservice/productservice/_jcr_content.searchassets.json';
    sitesearch = domain+'/' + getPublicUrlLanguage() + '/sitesearch.external.html';
    MXdebug = false;
}
var refDesignCount = 0;

/* This code for fetching the totalcount and facets start by  */
var productfacetsurl="&sp_c=10000&sp_date_range&sp_n=1&sp_a=sp10050e9b&sp_t=ProductFacetCount&sp_staged=1&sp_sfvl_field=category&sp_sfvl_field=subcategory&sp_sfvl_field=subsubcategory&sp_sfvl_field=s3category&sp_sfvl_field=s4category&sp_sfvl_field=s5category&sp_sfvl_field=s6category&sp_sfvl_field=keywords&sp_x_3=subcategory&filters&_charset_=UTF-8&sp_x_2=partinfo&sp_q_exact_2=";
var producttotalcounturl="&sp_c=10000&sp_date_range&sp_n=1&sp_a=sp10050e9b&sp_t=ProductList&sp_staged=1&sp_sfvl_field=category&sp_sfvl_field=subcategory&sp_sfvl_field=subsubcategory&sp_sfvl_field=s3category&sp_sfvl_field=s4category&sp_sfvl_field=s5category&sp_sfvl_field=s6category&sp_sfvl_field=keywords&sp_x_3=subcategory&filters&_charset_=UTF-8&sp_x_2=productsection&sp_q_exact_2=available";
/* This code for fetching the totalcount and facets end by  */

var productsectionurl="&sp_c=10&sp_date_range&sp_n=1&sp_a=sp10050e9b&sp_t=ProductSection&sp_staged=1&sp_sfvl_field=category&sp_sfvl_field=subcategory&sp_sfvl_field=subsubcategory&sp_sfvl_field=s3category&sp_sfvl_field=s4category&sp_sfvl_field=s5category&sp_sfvl_field=s6category&sp_sfvl_field=keywords&filters&_charset_=UTF-8&sp_x_2=productsection&sp_q_exact_2=available";
var productRootInfoFromNode = "http://localhost:4502/content/maximintegrated/en/appservice/productservice/_jcr_content.rootpartdetails.json?partList=";


function getPublicUrlLanguage() {
    var lang = "en_US";
    var urllanguage = getUrlLanguage();
    if (urllanguage ==='en') {
		lang = "en";
    } else if (urllanguage ==='ja' || urllanguage ==='jp') {
		lang = "jp";
		if(!isPublish)
			lang= "ja";
    } else if (urllanguage ==='cn' || urllanguage ==='zh') {
		lang = "cn";
		if(!isPublish)
			lang= "zh";
    }
	return lang;
}

function initiateFormSubmit(recentSearch) {
    if (typeof recentSearch != "undefined") {
        $('#search-bar').val(recentSearch);
        $("#search-bar-container #search-form #search-form-button").click();
    }
}

var getSnPLanguage = function() {
    var lang = "en_US";
    var urllanguage = getUrlLanguage();
    if (urllanguage ==='en') {
		lang = "en_US";
    } else if (urllanguage ==='ja' || urllanguage ==='jp') {
		lang = "ja_JP";
    } else if (urllanguage ==='cn' || urllanguage ==='zh') {
		lang = "zh_CN";
    }
	return lang;
} 

function showUserAssetShare() {

    var hasaccess = false;
    if (window.location.href.indexOf('sitesearch.html') != -1 || window.location.href.indexOf('sitesearch.external.html') != -1) {
        if ($.cookie('hasaccesstoassetshare') != undefined && $.cookie('hasaccesstoassetshare') != 'nologin'){
            hasaccess = ($.cookie('hasaccesstoassetshare') === 'true');
        } else {
            assetshareurlchk = assetsearchurl + "?chkAccess=true";
            //console.log(assetshareurlchk);
            $.ajax({
                url: assetshareurlchk,
                async: false,
                method: 'POST',
                data: {
                    chkAccess: "true"
                },
                success: function(data) {
                    if (data.hasaccess !== "nologin" || data.hasaccess != false) {
                        $.cookie('hasaccesstoassetshare', data.hasaccess);
                        hasaccess = true;
                    } else {
                        if($('#digital-asset-results-container') != undefined){
                			$('#digital-asset-results-container').hide();   
                        }
                        hasaccess = false;
                    }
                }
            });
        }
    }
    return hasaccess;
 
}

//Here we will store the facets results for later use on the filters. 
var MX = MX || {};
MX.currentFacets = MX.currentFacets || {};
/* This code for fetching the totalcount and facets start by  */
MX.currentProductFacets = MX.currentProductFacets || {};
/* This code for fetching the totalcount and facets end by  */



$(document).ready(function () {
	if(typeof $('.environment_snpsearch').attr('data-attr-environment-url') != "undefined" ) {
		qasearch=$('.environment_snpsearch').attr('data-attr-environment-url')+"/snpsearch/";
		
		if(isPublish) {
			autocompleteurl = $('.environment_snpsearch').attr('data-attr-environment-url')+'/autocomplete/sp10/05/0e/9b/';
		}
	}
	if(typeof $('.snp_account_no').attr('data-attr-acount-no') != "undefined" ) {
		snpAccountNo=$('.snp_account_no').attr('data-attr-acount-no');
	}
	if(typeof $('.snp_environment').attr('data-attr-environment') != "undefined" ) {
		snpEnvironment=$('.snp_environment').attr('data-attr-environment');
	}
	if (window.location.hostname !=='localhost') {
		categorysearchurl= qasearch;
	}
    /**
     * Query String serializer {'a': 1, 'b': 2} <-> a=1&b=2
     */
    var QS = {};
    QS.serialize = function(obj) {
        var output = [];
        for (var key in obj) {
            //console.log(key);
            if (obj.hasOwnProperty(key)) {
                var value = obj[key];
                //console.log('\t' + key + '=' + (value));
                if (value !== undefined) {
                    if( Object.prototype.toString.call( value ) === '[object Array]' && key !== 'filters') {
                        for (var i = 0 ; i< value.length ; i++) {
							output.push(key + '=' + (value[i]));
                        }
                    } else {
                    	output.push(key + '=' + (value));
                    }
                }
            }
        }
        return output.join('&');
    };

    QS.deserialize = function(str) {
        var output = {};
        var vars = str.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (output[pair[0]] || pair[0] ==='filters') {
                var arraytmp = [];
                if( Object.prototype.toString.call( output[pair[0]] ) === '[object Array]' ) {
                    arraytmp = output[pair[0]];
                }
				
				var tmpvalue = "";
				if(pair[0] !== 'sp_q'){
					tmpvalue=decodeURIComponent(pair[1] + '').replace(/\+/g, ' ');
				} else {
					tmpvalue=decodeURIComponent(pair[1] + '');
				}
				arraytmp.push(tmpvalue);
				output[pair[0]] = arraytmp;
            } else {
					if(pair[0] !== 'sp_q') {
						output[pair[0]] = decodeURIComponent(pair[1] + '').replace(/\+/g, ' ');
					} else {
						output[pair[0]] = decodeURIComponent(pair[1] + '');
					}
            }
        }
        //console.log('after deserialize');
        //console.log(output);
        return output;
    };


    function merge(obj1, obj2){
        var obj3 = {};
        for (var attrname in obj1) {
            if (obj1.hasOwnProperty(attrname)) {
                obj3[attrname] = obj1[attrname];
            }
        }
        for (var attrname in obj2) {
            if (obj2.hasOwnProperty(attrname)) {
                obj3[attrname] = obj2[attrname];
            }
        }
        return obj3;
    }



    /**
     * fetch results from an URL and then append them to a container
     */
    function constructProductSectionUrl(urlObject, productsection) {
		urlObject.sp_q = encodeURIComponent(urlObject.sp_q);
        if(urlObject.sp_q.indexOf('+') >-1)
            urlObject.sp_p="all";
        if(productsection.type == "productlist") {
            urlObject.sp_t = "ProductList";
            urlObject.sp_c= 100000;
            urlObject.sp_n=1;
            urlObject.sp_p="all";
	    urlObject.sp_sr=1;             
            urlObject.sp_x_9= "productsection";
            urlObject.sp_q_exact_9= "available";
			if(urlObject.sp_q_exact_7) {
            if(urlObject.sp_x_7=="subcategory" && urlObject.sp_q_exact_7.indexOf("ref-design") == -1)
            	delete urlObject.sp_q_exact_7;
            }

        } else if(productsection.type == "productfacetcount"){
            urlObject.sp_t = "ProductFacetCount";
            urlObject.sp_c= 100000;
            urlObject.sp_n=1;
            delete urlObject.sp_q_exact_2;
            delete urlObject.sp_q_exact_3;
            delete urlObject.sp_q_exact_4;
            delete urlObject.sp_q_exact_5;
            delete urlObject.sp_q_exact_7;
            delete urlObject.sp_q_2;
            delete urlObject.sp_q_3;
            delete urlObject.sp_q_4;
            delete urlObject.sp_q_5;
			delete urlObject.sp_e;
            urlObject.sp_x_9= "partinfo";
            urlObject.sp_q_exact_9= encodeURIComponent(productsection.partinfo);
            delete urlObject.sp_q;
            delete urlObject.sp_c;
        } else if(productsection.type == "productsection") {
            urlObject.sp_t = "ProductSection";
            urlObject.sp_c= productsection.sp_c;
            urlObject.sp_n=productsection.sp_n;
			delete urlObject.sp_e;
            urlObject.sp_x_9= "productsection";
            urlObject.sp_q_exact_9= "available";			
        }  else if(productsection.type == "productsectionusingpartinfo") {
            urlObject.sp_t = "ProductSection";
            delete urlObject.sp_q;
            //delete urlObject.sp_c;
            delete urlObject.sp_n;
			delete urlObject.sp_e;
            urlObject.sp_x_9= "productsection";
            urlObject.sp_q_exact_9= "available";
            delete urlObject.sp_q_exact_2;
            delete urlObject.sp_q_exact_3;
            delete urlObject.sp_q_exact_4;
            delete urlObject.sp_q_exact_5;
            delete urlObject.sp_q_exact_7;
            delete urlObject.sp_q_2;
            delete urlObject.sp_q_3;
            delete urlObject.sp_q_4;
            delete urlObject.sp_q_5;
        }
    var url = QS.serialize(urlObject);
    return url;
}


    function Section(args) {
        for (var key in args) {
            this[key] = args[key];
        }
        //console.log(this);
    }


    function renderRootPartInfo(count, start){
		$('#product-search-results .js-section-results').html('').html('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
        var productSectionUrl = constructProductSectionUrl(parameters.buildSearchEngine(), {"type":"productsection", "sp_c":count, "sp_n":start});
        var noResultsText = $("#product-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
        var noresultsMsg = noResultsText + " <b>" + decodeURIComponent(parameters.sp_q) + "</b>";
        var localSection = new Section();        
        localSection.parameters=parameters;
        localSection.template=templates.products;
       // if(parameters.sp_x_2 == "category" && parameters.sp_q_2 == "markets") {

             var productSectionPart = rootPartsArray.slice(start-1, start+count-1);
        var productSectionUrl2 = constructProductSectionUrl(parameters.buildSearchEngine(), {"type":"productsectionusingpartinfo", "partinfo":productSectionPartString});
                    var productSectionPartString=productSectionPart.join("|");
                    var productSectionUrl2 = productSectionUrl2+"&sp_x_8=partinfo&sp_q_exact_8="+encodeURIComponent(productSectionPartString);
                    $.ajax({
            			url: categorysearchurl+"?"+productSectionUrl2,
            			async: true,
            			success: function (response) {
            				if(response.partinfo) {

                        		$('#product-search-results .js-section-results').html("").html(localSection.renderProduct(response.partinfo, productSectionPart));
                                $('#product-search-results .js-section-header').show();
                                $("#page-numbers-products").show();
                            } else {

        						$('#product-search-results .js-section-results').html("").html("Products are not available.");
                            }
        				}
                	});
       /* } else {
            $.ajax({
                url: categorysearchurl+"?"+productSectionUrl,
                async: false,
                success: function (response) {
                if(response.partinfo.length > 0 && response.partinfo)
                	$('#product-search-results .js-section-results').html("").html(localSection.render(response.partinfo));
                else {
                    var productSectionPart = rootPartsArray.slice(start-1, start+count-1);
                    var productSectionPartString=productSectionPart.join("|");
                	var productSectionUrl2 = constructProductSectionUrl(parameters.buildSearchEngine(), {"type":"productsectionusingpartinfo", "partinfo":productSectionPartString});
                    //var productSectionUrl2 = productSectionUrl+"&sp_x_7=partinfo&sp_x_exact_7="+productSectionPartString; productsectionusingpartinfo
                    $.ajax({
            			//url: productRootInfoFromNode+productSectionPartString+"&lang="+getPublicUrlLanguage(),
                        url: categorysearchurl+"?"+productSectionUrl2,
            			async: false,
            			success: function (response) {
            				if(response.partinfo.length > 0) {
                				$('#product-search-results .js-section-results').html("").html(localSection.render(response.partinfo));
                            } else {

                            }
        				}
                	});
        		}	
				}
      	});
	  }
*/
}

/* This code for fetching the totalcount and facets start by  */
    function rendersnpfilter(){
				//var url = JSON.stringify(parameters.buildSearchEngine());
        		//alert(url);
        if(MX.currentFacetsFixed == undefined || MX.currentFacetsFixed == "undefined")
            MX.currentFacetsFixed = {};
        var productListUrl = constructProductSectionUrl(parameters.buildSearchEngine(), {"type":"productlist"});
		        var languagequerystring="sp_l="+getUrlLanguage()+"&sp_x_1=language&sp_q_1="+getSnPLanguage()+"&";
                $.ajax({
                url: categorysearchurl+"?"+productListUrl,
                async: false,				
                dataType: "text",
                success: (function (response) {
                    var resObject = JSON.parse(response.replace(",]}", "]}"));
                    var prodinfo=resObject.partinfo;
                    var partinfoArrray = new Array();
                    for (i = 0; i < prodinfo.length; i++) {

                    if(prodinfo[i] != "" && prodinfo[i] != undefined) {
                    	if(prodinfo[i].indexOf(",") != -1) {
                    		var prodItemArray = prodinfo[i].split(",");
                    		for (j = 0; j < prodItemArray.length; j++) {
								partinfoArrray.push(prodItemArray[j].replace(" ",""));
                			}
                       	} else {
                       		partinfoArrray.push(prodinfo[i]);
    					}
					}

                    }
                    partinfoArrray = partinfoArrray.filter( function( item, index, inputArray) {
                           return inputArray.indexOf(item) == index;
                    });
                    var facetsquerystring="";
					rootPartsArray = partinfoArrray;
                    if(partinfoArrray.length>0){
                        var localSection = new Section();
                       		localSection.template = templates.products;
                            localSection.parameters = this.parameters;
                            localSection.template = templates.products;
                             var data = {
                                 totalresults:partinfoArrray.length,
                                 start:0,
                                 resultsPerPage:parseInt(parameters.partLimit)
                            };
                        //rootPartsArray = partinfoArrray;
						productTotalResult = data.totalresults;
                        /*$('#product-search-results .js-section-results').html("");
                        $('#product-search-results .js-section-header').html("");*/
                        $("#page-numbers-products").html("");
                        $('#product-search-results .js-section-header').hide();
                        $("#page-numbers-products").hide();
						$('#product-search-results .js-section-header').html("").html(localSection.renderProductHeader(data));
                        if ($("#page-numbers-products").is(":empty")) {
                            $("#page-numbers-products").append(createPages(this.parameters.partOffset, this.parameters.partLimit, data.totalresults, "products"));
                        }

                        for(partindex=0;partindex < partinfoArrray.length;){
						partArray = partinfoArrray.slice(partindex, partindex+399);
                        partindex =partindex+399 ; 
                        facetsquerystring=partArray.join("|");
                            var productfacetCounttUrl = constructProductSectionUrl(parameters.buildSearchEngine(), {"type":"productfacetcount", "partinfo" : facetsquerystring});    
                        $.ajax({
                            url: categorysearchurl+"?"+productfacetCounttUrl,
                            async: true,							
                            success: (function (response) {
                                var productfacets=response.results.facets;
                                MX.currentProductFacets = productfacets;
                                MX.currentProductFacetsFixed = {};
                                var facetsresult=response.results;
                                for (var i = 0; i < facetsresult.facets.length; i++) {
                                    var nametmp = facetsresult.facets[i].name;
                                    if(nametmp == "s3category") break;
                                    var valuesArray = facetsresult.facets[i].values;
                                    var countsArray = facetsresult.facets[i].counts;
                                    var params = window.parameters;
                                    if (nametmp) {
                                        for (var j = 0; j < valuesArray.length; j++) {
                                            var valuetmp = valuesArray[j];
                                            var counttmp = countsArray[j];
                                            $.each(filterdepths, function(index, value) {
                                                var id = index + 2;
                                                if (nametmp == value) {
                                                    var qparam = 'sp_q_' + id;
                                                    if(MX.currentFacetsFixed != undefined){
                                                        if (typeof params[qparam] !== 'undefined' && params[qparam] == valuetmp) {
                                                            if(MX.currentFacetsFixed[nametmp] != undefined){
                                                            	MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                                if(MX.currentFacetsFixed[nametmp][valuetmp] != "" && MX.currentFacetsFixed[nametmp][valuetmp] != undefined)
                                                            		MX.currentFacetsFixed[nametmp][valuetmp] = MX.currentFacetsFixed[nametmp][valuetmp]+counttmp;
                                                                else
                                                                    MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;

                                                            }else{
                                                                MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                            	MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                                            }
                                                        } else if (typeof params[qparam] === 'undefined') {
                                                            if(MX.currentFacetsFixed[nametmp] != undefined){
                                                            	MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                            	if(MX.currentFacetsFixed[nametmp][valuetmp] != "" && MX.currentFacetsFixed[nametmp][valuetmp] != undefined)
                                                            		MX.currentFacetsFixed[nametmp][valuetmp] = MX.currentFacetsFixed[nametmp][valuetmp]+counttmp;
                                                                else
                                                                    MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                                            }else{
                                                                MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                            	MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                                            }
                                                        } else {
                                                           if(MX.currentFacetsFixed[nametmp] != undefined){
                                                            	MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                                if(MX.currentFacetsFixed[nametmp][valuetmp] != "" && MX.currentFacetsFixed[nametmp][valuetmp] != undefined)
                                                            		MX.currentFacetsFixed[nametmp][valuetmp] = MX.currentFacetsFixed[nametmp][valuetmp]+counttmp;
                                                                else
                                                                    MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                                           }else{
                                                                MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                                                                MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                                           }
                                                        }
                                                    }else{
														 if (typeof params[qparam] !== 'undefined' && params[qparam] == valuetmp) {
                                                            MX.currentProductFacetsFixed[nametmp] = MX.currentProductFacetsFixed[nametmp] || {};
                                                            MX.currentProductFacetsFixed[nametmp][valuetmp] = counttmp;
                                                        } else if (typeof params[qparam] === 'undefined') {
                                                            MX.currentProductFacetsFixed[nametmp] = MX.currentProductFacetsFixed[nametmp] || {};
                                                            MX.currentProductFacetsFixed[nametmp][valuetmp] = counttmp;
                                                        } else {
                                                            MX.currentProductFacetsFixed[nametmp] = MX.currentProductFacetsFixed[nametmp] || {};
                                                            MX.currentProductFacetsFixed[nametmp][valuetmp] = counttmp;
                                                        }

                                                    }

                                                }
                                            });
                                        }
                                    }
                                }

								if(MX.currentFacetsFixed == undefined){
                                   MX.currentFacetsFixed=MX.currentProductFacetsFixed;

                                }
								
								$('#category-search-results').trigger('completecategory');


                            }).bind(this),
                            error: function () {
									$('#category-search-results').trigger('completecategory');
								    console.log('something went wrong in rendersnpfilter');
                            }
                        });
    }

                    } else {
						$("#product-results-container").show();
						 var noResultsText = $("#product-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
						var noresultsMsg = noResultsText + " <b>" + decodeURIComponent(parameters.sp_q) + "</b>";
						 $("#product-results-container").find('.js-section-header').html(noresultsMsg);
						$("#product-results-container").find('.js-section-results').html("");
                        $("#product-results-container").find("#page-numbers-products").html("");
                        $('#category-search-results').trigger('completecategory');
					}
                   }).bind(this),
                    error: function () {
                        $('#category-search-results').trigger('completecategory');
                        console.log('something went wrong in rendersnpfilter');
                    }
				});	
}

/* This code for fetching the totalcount and facets end*/
    Section.prototype.fetch = function(callback) {

        if (this.parameters.haveQueryParam()) {
            if (this.type=="categories") {
                //console.log('processing categories fetch');
                this.fetchFunction(callback,this.parameters.buildSearchEngine());
            } else if(this.type=="assets") {
                //console.log('processing assets fetch');
            	$('#digital-asset-results-container').show();
            	$('#digital-asset-results-container > a#expand-digital-asset-results').hide();
                this.fetchFunction(callback,this.parameters.buildSearchEngine());
            } else if (this.type=="products") {
                //console.log('processing products fetch');
                this.fetchFunctionProducts(callback,this.parameters.buildSearchEngine());
            }  else if (this.type=="facets") {
                //console.log('processing products fetch');
               this.fetchFunction(callback,this.parameters.buildSearchEngine());
            }else {
                //console.log('Unrecognized type');
            }
        } else {
			//console.log('no query param passed');
        }

    };

    Section.prototype.fetchFunction = function(callback,searchtype) {
		var url = this.url + '?' + QS.serialize(searchtype);
        var method="GET";
        var data="";
        if(this.type=="assets"){
			 $('#digital-asset-results-container .js-section-results').prepend('<img id="search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
             method="POST";
             url = this.url;
             data=QS.serialize(searchtype);
        } if(this.type == "categories") {
			url = url+"&&sp_x_11=generalsection&sp_q_exact_11=show&sp_p=all"
		}
        //console.log(url);
        return $.ajax({
            url: url,
            method:method,
            //async: false,
            data: data,
            success: (function (response) {
                this.success(response);
                //callback && 
                callback(this);
            }).bind(this),
            error: function () {
                 if(this.type=="assets"){
                	$('#digital-asset-results-container .js-section-results').html("");
                 }
                /* This code for fetching the totalcount and facets start by  */
                if (this.type=="categories") {
                	rendersnpfilter(searchtype);
                    //renderRootPartInfo();
                }
                /* This code for fetching the totalcount and facets end by  */

				console.log('something went wrong in Section.prototype.fetchFunction');
            }
        });
    }

    Section.prototype.fetchFunctionProducts = function(callback,searchtype) {
		var url = this.url + '?' + QS.serialize(searchtype);
        var productUrl = newProductSearchUrl;
        if (!$('.products-search-spinner').length) {
            $('.product-loader').prepend('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">')
        }
        var resultdataobject;
        var result = $.ajax({
			type : 'POST',
            url: productUrl,
            data: QS.serialize(searchtype),
            //async: false,
            success: (function (response) {
                //console.log(response);
                this.successProducts(response);
                callback && callback(this);
                resultdataobject = response;
            }).bind(this)
        });

		//Alright this is where the magic happens for product search. 
		var thisref = this;
        return result;
    }

    Section.prototype.renderHeader = function(response) {
        var data = {
            total: response.general.total,
            count: response.general.upper,
            query: parameters.sp_q,
            title: this.title,
            showAllText: response.showAllText,
            showLessText: response.showLessText,
            showAll: (parameters.sections.length === 0),
            url: '?' + QS.serialize(this.parameters.buildSearchEngine()),
        };
         return templates.sectionHeader(data);
    };
     Section.prototype.renderAssetHeader = function(response) {
        var data = {
            total: response.size,
            count: parseInt(response.offset,10),
            query: parameters.sp_q,
            limit: parseInt(response.limit,10),
            title: Granite.I18n.get("digitalAssets"),
            showAll: (response.limit == 4),
            showAllText: this.showAllText,
            url: '?' + QS.serialize(this.parameters.buildSearchEngine()),
        };//*/
         //var data = {};
        if(response.limit>4){
        	 if(!$("#expand-product-results").hasClass("collapsed")){
             	$("#expand-product-results").trigger("click");
             }
             if(!$("#expand-category-results").hasClass("collapsed")){
             	$("#expand-category-results").trigger("click");
             }
        }
		if(data.total > 0)
			return templates.sectionAssetHeader(data);
		else {
			 var noResultsText = $("#digital-asset-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
 	         var noresultsMsg = noResultsText + " <b>" + parameters.sp_q + "</b>";
			return noresultsMsg;
		}
        
    };

    Section.prototype.renderProductHeader = function(response) {
        var max = parseInt(response.start) + response.resultsPerPage,
            total = response.totalresults,
            min = parseInt(response.start) + 1;
        if (total <= parseInt(parameters.partLimit)) {
            min = 1;
            max = total;
        }
        if (max > total) {
            max = total;
        }
        var data = {
            total: response.totalresults,
            count: parameters.partLimit,
            min: min,
            max: max,
            query: parameters.sp_q,
            title: Granite.I18n.get("products"),
            showAllProducts: parameters.showAllProducts,
            showAllText: this.showAllText,
            url: '?' + QS.serialize(this.parameters.buildSearchEngine()),
        };
		if(total > 0)
			return templates.sectionProductHeader(data);
		else {
			var noResultsText = $("#product-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
			var noresultsMsg = noResultsText + " <b>" + decodeURIComponent(parameters.sp_q) + "</b>";
			return noresultsMsg;
		}
    };

    Section.prototype.getQueryStringValue = function() {
        var assoc = {};
        var decode = function(s) {
            return decodeURIComponent(s.replace(/\+/g, " "));
        };
        var queryString = location.search.substring(1);
        var keyValues = queryString.split('&');

		for(var i=0; i < keyValues.length; i++) { 
            if(keyValues[i] != "" && keyValues[i] != undefined && keyValues[i].indexOf("=") > -1) {
			var key = keyValues[i].split('=');
			if (key.length > 1) {
				assoc[decode(key[0])] = decode(key[1]);
			}
		} 
        }
		return assoc;
	}
	
	Section.prototype.inArrayCaseInsensitive = function(array, word) {
        return array.map(function(item) {
            return item.toLowerCase();
        }).indexOf(word.toLowerCase());
	}
	
	Section.prototype.processKeywords = function(keywords) {
        var queryTerm = window.parameters.sp_q;
		var arrayLength= keywords.length;
		var relatedproducts=[];
		if(arrayLength > 0) {
			for(var i=0; i<arrayLength; i++) {
				var keywordsString = keywords[i];
				var keywordsString_array = keywordsString.split(',');

				for(var j = 0; j < keywordsString_array.length; j++) {
					var trim_keyword= keywordsString_array[j].replace(/^\s*/, "").replace(/\s*$/, "");
					if(this.inArrayCaseInsensitive(relatedproducts,trim_keyword) <= -1) {
						relatedproducts.push(trim_keyword);
					}

				}
			}
			if(this.inArrayCaseInsensitive(relatedproducts,queryTerm) > -1) {
				relatedproducts.splice(this.inArrayCaseInsensitive(relatedproducts,queryTerm),1);
			}
		}
		
		return relatedproducts;
		
	}
	
	
    Section.prototype.success = function(response) {
        if (this.type=="categories") {
            //console.log('processing categories results');
			this.processCategories(response);
            this.totalPages = Math.ceil(this.total / this.parameters.sp_c);

            //if (loaded === sectionNames.length) {
            //console.log(i+ ' inserting into $("#page-numbers-'+this.type+'")');
            //console.log($("#page-numbers-"+this.type));

            if (this.total >0 && $("#page-numbers-"+this.type).is(":empty")) {
                if (this.type = 'categories') {
                	$("#page-numbers-"+this.type).append(createPages(this.parameters.sp_n, this.parameters.sp_c, this.total, this.type));
                }
                if (this.type = 'assets') {

                }
            } else {
				$("#category-results-container").show();
				$("#category-search-results").find('.js-section-results').html("<div class='smaller'>"+$("#category-search-results .js-section-results").attr("data-no-results-message") + " <b>" + decodeURIComponent(this.parameters.sp_q) +"</b></div>");
            }
        } else if (this.type == "assets") {
            if(response.hasaccess != undefined  && response.hasaccess == false){
                $.cookie('hasaccesstoassetshare', response.hasaccess);
				return false;	
            }
            //console.log('processing assets results');
            if (typeof response !== 'undefined' && typeof response.hits !== 'undefined' && response.hits.length > 0) {
                this.processAssets(response);
                this.totalPages = Math.ceil(this.total / this.parameters.assetLimit);
    
                //if (loaded === sectionNames.length) {
                //console.log(i+ ' inserting into $("#page-numbers-'+this.type+'")');
                //console.log($("#page-numbers-"+this.type ));
                if ($("#page-numbers-"+this.type).is(":empty")) {
                    $("#page-numbers-"+this.type).append(createPages(this.parameters.assetOffset, this.parameters.assetLimit, this.total, this.type));
                }
            }else{
                $('#assets-to-download').hide();
                if(response.hasaccess == 'nologin' || response.hasaccess == false){	
                	$('#digital-asset-results-container').hide();   
                }else{
                	$('#digital-asset-results-container > a#expand-digital-asset-results').show();
 	                var noResultsText = $("#digital-asset-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
 	        		var noresultsMsg = noResultsText + " <b>" + parameters.sp_q + "</b>";
 	                $('#digital-asset-results-container').find('.js-section-header').html(noresultsMsg);
 					$('#digital-asset-results-container').find('.js-section-results').html("");
                }
                if(typeof this.parameters.extensions == 'undefined'){
                	$('button[data-id=refine-filter-filetype]').parent().hide(); 
                }
              }

        } else {
			//console.log('Unrecognized type');
        }
    };

    Section.prototype.successProducts = function(response) {
        if (this.type=="products") {
			//console.log('processing products results');
            if (typeof response.products !== 'undefined') {
				this.processProducts(response);
                this.totalPages = Math.ceil(response.totalresults / parseInt(this.parameters.partLimit));
                response.numberOfPages = this.totalPages;
                //if (loaded === sectionNames.length) {
                //console.log(i+ ' inserting into $("#page-numbers-'+this.type+'")');
                //console.log($("#page-numbers-"+this.type ));
                if ($("#page-numbers-"+this.type).is(":empty")) {
                    $("#page-numbers-"+this.type).append(createPages(this.parameters.partOffset, this.parameters.partLimit, this.total, this.type));
                }
            }
        } else {
			//console.log('Unrecognized type');
        }
    };

    Section.prototype.successProductsFromKeywords = function(response) {
        if (this.type=="products") {
			//console.log('processing products results');
            this.processProductsFromKeywords(response);

        } else {
			//console.log('Unrecognized type');
        }
    };

    Section.prototype.processCategories = function(response) {        
        if(this.$container === undefined)
                this.$container =  $('#category-search-results');
        if(this.parameters === undefined)
            this.parameters = window.parameters;
        if(this.template === undefined)
            this.template = templates.categories;
        if (response.results && response.results.map) {
            var results = response.results.map(function(result, index) {
                var fields = result.fields;
                var obj = {};
                fields.forEach(function(field) {
                    obj[field.name] = field.value;
                });
    
                obj.index = index;
                return obj;
            });
    		response.showAllText = $("#category-search-results .js-section-results").attr("showallbutton");
            response.showLessText = $("#category-search-results .js-section-results").attr("showlessbutton");
            this.total = parseInt(response.general.total, 10);
			MX.currentFacets = response.facets;
            MX.currentFacetsFixed = {};
            var keywords = [];
            for (var i = 0; i < response.facets.length; i ++) {
				var nametmp = response.facets[i].name;
                var valuesArray = response.facets[i].values;
                var countsArray = response.facets[i].counts;
                var params = window.parameters;
                //console.log('params');
                //console.log(params);
                if (nametmp) {
                    for (var j = 0; j < valuesArray.length; j++) {
                        var valuetmp = valuesArray[j];
                        var counttmp = countsArray[j];
                        $.each(filterdepths,function(index,value) {
                            var id=index+2;
                            if (nametmp==value) {
                                var qparam = 'sp_q_'+id;
                                if (typeof params[qparam] !=='undefined' && params[qparam] == valuetmp) {
									MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                       				MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                } else if (typeof params[qparam] ==='undefined')  {
									MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                       				MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                } else {
                                    MX.currentFacetsFixed[nametmp] = MX.currentFacetsFixed[nametmp] || {};
                       				MX.currentFacetsFixed[nametmp][valuetmp] = counttmp;
                                }
	                        }
                        });
                        //console.log('MX.currentFacetsFixed['+nametmp+']['+valuetmp+'] = '+counttmp);
                    }
                    if (nametmp =="keywords") {
						keywords = response.facets[i].values;
                    }
                }
            } 
    	    /* This code for fetching the totalcount and facets start by  */
            if(!window.parameters.notLoadProduct && window.parameters.notLoadProduct != 1) {
            	$('#product-results-container').show();
            	rendersnpfilter();
            	$("#products-search-spinner").hide();
            	renderRootPartInfo(parameters.partLimit,1);
                window.parameters.notLoadProduct = 0;
                delete window.parameters.notLoadProduct;
            } else {
                delete window.parameters.notLoadProduct;
            }
            /* This code for fetching the totalcount and facets end by  */

            // and then build html and append it to the container            
            this.$container.show();
            $('#category-results-container').show();
            //console.log('products container id: ' + this.$container.attr('id'));
            //console.log('MX.currentFacetsFixed created with:');
            //console.log(MX.currentFacetsFixed);
            this.$container.find('.js-section-header').html("").html(this.renderHeader(response));
            this.$container.find('.js-section-results').append(this.render(results));
            /* This code for fetching the totalcount and facets start by  */
            // this.$container.trigger('completecategory');
            /* This code for fetching the totalcount and facets end by  */
			var keywordsArray = this.processKeywords(keywords);
            if (keywordsArray.length>0) {
                var relatedsearchesnumber = parseInt($('#related-searches-list').attr('relatedsearchesnumber'),10) || 5;
                var outputlist = "";
                for (var i =0; i < keywordsArray.length && i < relatedsearchesnumber; i++) {
                    var keyword = keywordsArray[i];
                    //if (keyword.length<30) {
                    outputlist += '<li><a href="javascript:initiateFormSubmit(\''+keyword+'\')" ><span id="recent-search-icon" class="glyphicon glyphicon-search" ></span>' + keyword + '</a></li>';
                    //}
                }
                $('#related-searches-list').html(outputlist);
            	$('#related-search-container').show();
				if(response.general.total == 0) {
					 this.$container.show();			
					this.$container.find('.js-section-results').html("<div class='smaller'>"+$("#category-search-results .js-section-results").attr("data-no-results-message") + " <b>" + decodeURIComponent(this.parameters.sp_q) +"</b></div>");					
				}
					
            }
        } else {
			if(!window.parameters.notLoadProduct && window.parameters.notLoadProduct != 1) {
            	$('#product-results-container').show();
            	rendersnpfilter();
            	$("#products-search-spinner").hide();
            	renderRootPartInfo(parameters.partLimit,1);
                window.parameters.notLoadProduct = 0;
                delete window.parameters.notLoadProduct;
            } else {
                delete window.parameters.notLoadProduct;
            }
            this.$container.show();			
			this.$container.find('.js-section-results').html("<div class='smaller'>"+$("#category-search-results .js-section-results").attr("data-no-results-message") + " <b>" + decodeURIComponent(this.parameters.sp_q) +"</b></div>");
        }
        //collapse categories on show all products
        if (parameters.showAllProducts == "1") {
            $("#expand-category-results").click();
        }
    }

    Section.prototype.processAssets = function(response) {
		//todo: implement
        //console.log('processAssets');
		//console.log(response);
        var results = {};
        this.total = parseInt(response.size,10);
		var hitArray = response.hits;
        //console.log(hitArray);
        this.$container.show();
        $('#digital-asset-results-container > a#expand-digital-asset-results').show();
		this.$container.find('.js-section-header').append(this.renderAssetHeader(response));
        this.$container.find('.js-section-results').html("").append(this.render(hitArray));
        $(document).on('click','#assetShowAll',function(e) {
            parameters.assetLimit = 12;
            if(parameters.assetPage > 1){
                var assetoffset=parameters.assetPage*4/12;
                parameters.assetPage=Math.round(assetoffset);
            }
            parameters.showAll=true;
        	//applyParameters();
            parameters.assetRefresh();
            if(!$("#expand-product-results").hasClass("collapsed")){
            	$("#expand-product-results").trigger("click");
            }
            if(!$("#expand-category-results").hasClass("collapsed")){
            	$("#expand-category-results").trigger("click");
            }
			e.preventDefault();
        });
        $(document).on('click','#assetShowLess',function(e) {
            parameters.assetLimit = 4;
            parameters.showAll=false;
        	//applyParameters();
            parameters.assetRefresh();
            if($("#expand-product-results").hasClass("collapsed")){
            	$("#expand-product-results").trigger("click");
            }
            if($("#expand-category-results").hasClass("collapsed")){
            	$("#expand-category-results").trigger("click");
            }
                
			e.preventDefault();
        });
         var digital = {
                displayname: Granite.I18n.get("digitalAssets"),
                name:'digitalassets',
                category:'digitalassets',
                categoryname:'digitalassets',
                show: true,
                currentdepth: 0,
                count: 5,
                checkbox: true,
             	style: {background: '#f0efee'},
            };

        var assetfilters = {
        name: 'root',
        children: [
            digital
        ]
  		};

        $('#js-filter-options-container-asset').html(templates.filters(assetfilters.children, 0, []));
        $('#js-filter-options-container-asset-mobile').html(templates.filters(assetfilters.children, 0, []));

        $('#search-filter, #search-filter-modal').selectpicker();

        this.$container.trigger('ready');

         $('.digital-asset-modal-header-buttons').each(function(index){
            var root = location.protocol + '//' + location.host; 
            var varindex=index;
            var bookmark=$(this).find("#assetmodal-blog-"+varindex);
			//shareByAddthis('#assetmodal-blog-'+varindex, bookmark.attr("data-title"), root+bookmark.attr("data-id"), true);
              $("a#assetmodal-mark-"+varindex).click(function(){
              addBookmark(bookmark.attr("data-title"), root+bookmark.attr("data-id"));
        	 });

         });

        var assetFilterVar=$("#js-filter-options-container-asset label[data-id='digitalassets']").parent();

        var varcategorycount=window.parameters.sp_q_2;
        var varsubcategorycount=window.parameters.sp_q_3;
        var querysubcategpry="";
        if(varcategorycount != undefined && varsubcategorycount != undefined && varcategorycount == "digitalassets"){
            if(varsubcategorycount == "videos"){
				querysubcategpry="images";
            }else{
                querysubcategpry=varsubcategorycount;
            }
			$ul = $('<ul />');
			var asssetcounturl=assetsearchurl;// +"?"+response.urlquery+"&assetfiltercount="+querysubcategpry; 
                $.ajax({
           		 url: asssetcounturl,
                 async: true,
                 method: 'POST',
                 data: QS.serialize(window.parameters.buildSearchEngine()) + "&assetfiltercount=" + querysubcategpry,  
           		 success: (function (response) {
                     if(varsubcategorycount == "images"){
                         if(response.count != 0){
                                $ul.append(templates.assetfilterOption(response,digital.name,digital.checkbox));
                          }
                     }else if(varsubcategorycount == "videos"){
                         if(response.videocount != 0){
                              var videoresponse={"name":"Videos","displayName":Granite.I18n.get("video"),"strPath":"5-5","count":+response.videocount};
                                $ul.append(templates.assetfilterOption(videoresponse,digital.name,digital.checkbox));
                          }
                     }else{
						if(response.count != 0){
                                $ul.append(templates.assetfilterOption(response,digital.name,digital.checkbox));
                          }					
                     }	
           		 }),
            	error: function () {
					console.log('something went wrong in Section.prototype.processAssets');
          	    }
      		  });
            assetFilterVar.append($ul);

        }else if(response.assetArray.length>0){
        	assetFilterVar.append('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 35%;margin-top: -17%;">');
            var assetajaxcalls=response.assetArray.length;
			$ul = $('<ul />');
            response.assetArray.forEach(function(asset,i) {
				var asssetcounturl=assetsearchurl;//+"?"+response.urlquery+"&assetfiltercount="+asset.name; 
                $.ajax({
           		 url: asssetcounturl,
                    method: 'POST',
                    async: true,
                    data: QS.serialize(window.parameters.buildSearchEngine()) + "&assetfiltercount=" + asset.name,
           		 success: (function (response) {
                     if(asset.name =="Images"){
                         if(response.count != 0){
                                $ul.append(templates.assetfilterOption(response,digital.name,digital.checkbox));
                          }
                          if(response.videocount != 0){
                              var videoresponse={"name":"Videos","displayName":Granite.I18n.get("video"),"strPath":"5-5","count":+response.videocount};
                                $ul.append(templates.assetfilterOption(videoresponse,digital.name,digital.checkbox));
                          }
                     }else{
						if(response.count != 0){
                                $ul.append(templates.assetfilterOption(response,digital.name,digital.checkbox));
                          }					
                     }
                     assetajaxcalls=assetajaxcalls-1;
                     if(assetajaxcalls==0){
                        if($("#js-filter-options-container-asset #digitalassets img.products-search-spinner") != undefined){
                        	$("#js-filter-options-container-asset #digitalassets img.products-search-spinner").remove();
                        }
                    }
           		 }),
            	error: function () {
					console.log('something went wrong in Section.prototype.processAssets');
					if($("#js-filter-options-container-asset #digitalassets img.products-search-spinner") != undefined){
                     	$("#js-filter-options-container-asset #digitalassets img.products-search-spinner").remove();
					}
          	    }
      		  });

                //$ul.append(templates.assetfilterOption(asset,digital.name,digital.checkbox));
				//assetFilterVar.append("<ul>"+templates.assetfilterOption(response.assetArray)+"</ul>");
            });
			assetFilterVar.append($ul);
        }else{
			$("#js-filter-options-container-asset label[data-id='digitalassets']").find("a").css("cursor","default").css("color","gray");
        }
        //collapse on show all products
        if (parameters.showAllProducts == "1") {
            $("#expand-digital-asset-results").click();
        }

    }

    Section.prototype.processProductsLegacy = function(response) {
        var countobj;
        var paginationcell=$('<div />').append(response).find('td[width="20%"]');
        if (paginationcell && paginationcell.text()) {
        	var resultarray = paginationcell.text().split("|")[1].split(" of ");
            countobj = {};
        	countobj.total = resultarray[1];
			countobj.start = resultarray[0].split("-")[0].trim();
	        countobj.end = resultarray[0].split("-")[1].trim();
        }
        processProductsLegacyResponse = response;
        var resultTable = $('<div />').append(response).find('table[border=0]');
		var resultText = resultTable.html();
		var rows = $(resultTable).find("tr");
        var rowsout = [];
        $( rows).each(function( index ) {
          //console.log( index + ": " + $( this ).text() );
            var columns = $(this).find("td");
            if (columns.length>1) {
				var partHref =$(columns[0]).find('a').attr('href');
                var partText =$(columns[0]).find('a').text();
                var description = $(columns[1]).find('span').html();
                var rowOut = {
                    parturl: partHref,
                    partnum: partText,
                    partdesc: description
                };
                rowsout.push(rowOut);
            }
        });
        // and then build html and append it to the container
        this.$container.show();
        //this.$container.find('.js-section-header').append(this.renderProductHeader(response));
		var outresult = this.render(rowsout);
        this.$container.find('.js-section-results').append(outresult);
        this.$container.trigger('ready');
        return countobj;
    }
    

    Section.prototype.processProducts = function(response) {
        if(this.$container === undefined)
            this.$container =  $('#product-search-results');
        if(this.parameters === undefined)
            this.parameters = window.parameters;
        if(this.template === undefined)
            this.template = templates.products;
        var results = [];
        this.total = parseInt(response.totalresults, 10);
        var rootArray = response.products;
        var noResultsText = $("#product-results-container").data("no-results-message") || Granite.I18n.get("noResultProduct");
        var noresultsMsg = noResultsText + " <b>" + decodeURIComponent(parameters.sp_q) + "</b>";
        $(".products-search-spinner").remove();
        // and then build html and append it to the container
        if(response.referenceDesignCount) {
            refDesignCount = response.referenceDesignCount.count;
            if(refDesignCount == undefined){
				refDesignCount="";
            }
            if($("a[data-id=ref-design]").length > 0)
                $("a[data-id=ref-design]").html($("a[data-id=ref-design]").html().replace(/([A-Za-z\s]+)\(([0-9]+)\)/g, function(match, $1,$2) { var count = +$2 + +refDesignCount; return $1 + "("+count+")"}));
            else
                console.log("Reference Design is not availble");
        }
        this.$container.show();
        if (this.total === 0) {
            this.$container.find('.js-section-header').html(noresultsMsg);
            this.$container.find('.js-section-results').html("");
        } else {
            this.$container.find('.js-section-header').append(this.renderProductHeader(response));
            var appendtxt = this.render(rootArray);
            //console.log(appendtxt);
            this.$container.find('.js-section-results').append(appendtxt);
        }
        this.$container.trigger('ready');
    }

    Section.prototype.processProductsFromKeywords = function(response) {
        //console.log('processProductsFromKeywords');
        //console.log(response);

        var results = [];
        this.total = response.size;
        var hitlist = response.hits;
        for (var i =0; i< hitlist.length;i++) {
            var hit = hitlist[i];
            var obj = {};
            obj.Root_Part = hit.part_number;
			obj.datasheetURL = hit.data_sheet;
            obj.title = hit.headline_text;
            obj.excerpt = hit.excerpt;
            obj.orderableparts = [];
            results.push(obj);
        }
        // and then build html and append it to the container
        this.$container.show();
        this.$container.find('.js-section-header').append(this.renderProductHeader(response));
        var appendtxt = this.render(results);
        //console.log(appendtxt);
        this.$container.find('.js-section-results').append(appendtxt);
        this.$container.trigger('ready');
    }
	
    Section.prototype.render = function(results) {
        return this.template(results);
    };

	Section.prototype.renderProduct = function(results, partArray) {
        return this.template(results, partArray);
    };

    function Parameters(args) {

		if(args.sp_q) {
			args.sp_q = decodeURIComponent(args.sp_q);
			args.sp_q = args.sp_q.replace("+","%2B");
			args.sp_q = args.sp_q.replace("#","%23");
			args.sp_q = args.sp_q.replace("/","%2F");
			args.sp_q = args.sp_q.replace("&","%26");
			args.sp_q = args.sp_q.replace("-","%2D");			

		}
        if (args.categoryPage) {
            args.categoryPage = parseInt(args.categoryPage, 10);
            if (args.sp_c) {
                args.sp_n = args.sp_c * (args.categoryPage*1 - 1) + (args.sp_n!=='NaN'?args.sp_n*1:0);
            }
        }
        if (args.assetPage) {
			args.assetPage = parseInt(args.assetPage, 10);
            if (args.assetLimit) {
                args.assetOffset = args.assetLimit * (args.assetPage*1 - 1) + (args.assetOffset!=='NaN'?args.assetOffset*1:0);
            }
        }
        if (args.partPage) {
			args.partPage = parseInt(args.partPage, 10);
            if (args.partLimit) {
                args.partOffset = args.partLimit * (args.partPage*1 - 1) + (args.partOffset!=='NaN'?args.partOffset*1:0);
            }
        }
		this.categoryPage = args.categoryPage || 1;
		this.assetPage = args.assetPage || 1;
		this.partPage = args.partPage || 1;
        if (args.sections) {
            args.sections = args.sections.split(',');
        }

        //product search 
        this.part = args.sp_q;
        this.canSearch = args.canSearch || 'true';
		this.sp_c = parseInt(args.sp_c, 10) || parseInt($("#category-search-results .js-section-results").attr('numberofitemstodisplay')) || 20;
        this.partLimit = args.partLimit || parseInt($("#product-results-container").data('items-limit')) || 5;
        this.assetLimit = args.assetLimit || 4;
        this.assetOffset = args.assetOffset || 0;
        this.partOffset = args.partOffset || 1;
        this.sp_n = args.sp_n || 1;
		this.sp_e = args.sp_e || 3;
        this.showAllProducts = args.showAllProducts || 0;

        //asset search 
        this.q = args.sp_q;
		this.showAll = args.showAll || 'false';

        // search engine api call
		
        this.sp_a = args.sp_a || snpAccountNo;  //api id
        this.sp_t = args.sp_t || 'test';       //transport
        this.sp_sfvl_field = allfilters; // fields to include in result
        if(snpEnvironment == "staged") {
        	this.sp_staged = '1';
        } else {
        	this.sp_staged = '0';
        }
        this.sp_l =  getUrlLanguage();	        //language to search
        this.sp_x_1 = 'language';
        this.sp_x_3="subcategory";
        this.sp_q_1=getSnPLanguage();
        this.sp_q_exact_3=args.sp_q_exact_3;

        var current = this;
        //Should really make an arry of objects for these... My bad. 
        $.each(filterdepths,function(index,value) {
            var id=index+2;
            var qparam = 'sp_q_'+id;
            var xparam = 'sp_x_'+id;
			if (args[qparam]) {
            	current[xparam] = value;
        		current[qparam] = args[qparam];
        	}
        });

        this.extensions=args.extensions;
        this.sp_n = args.sp_n || 1;
        this.filters = args.filters || [];
        this.sp_date_range = args.sp_date_range;
        this.sp_q = args.sp_q;
        this.sp_s = args.sp_s;
        this._charset_='UTF-8';
        //console.log('printing parameter');
        //console.log(this);
    }

    Parameters.COMMON = [
        'sp_q',
        'sp_date_range',
        'sp_s',
        'sp_l',
		'sp_e',
        'categoryPage',
        'partPage',
        'assetPage',
        'extensions',
        'sections',
        'sp_n',
        'sp_c',
        'q',
        'assetOffset',
        'assetLimit',
        'showAll',
        'showAllProducts',
        'part',
        'canSearch',
        'partLimit',
        'partOffset',
        'sp_a',
        'sp_t',
        'sp_staged',
        'sp_sfvl_field',
        'sp_l',
        'sp_x_1',
        'sp_q_1',
        'sp_x_2',
        'sp_q_2',
        'sp_x_3',
        'sp_q_3',
        'sp_x_4',
        'sp_q_4',
        'sp_x_5',
        'sp_q_5',
        'sp_x_6',
        'sp_q_6',
        'sp_x_7',
        'sp_q_7',
        'sp_x_8',
        'sp_q_8',
        'sp_q_exact_3',
        'sp_q_exact_7',
        'sp_q_exact_strpath_3',
        'filters',
        '_charset_'
    ];

    Parameters.prototype.haveQueryParam = function () {
		return (typeof this.sp_q !=='undefined');
    }

    Parameters.prototype.get = function (type) {
        var keys = Parameters[type];
        var output = {};
        keys.forEach((function (key) {
            output[key] = this[key];
        }).bind(this));
        return output;
    };

    Parameters.prototype.buildSearchEngine = function(start) {
		var allInputs = this.get('COMMON');
		if(typeof start != "undefined") {
			allInputs["start"] = start;
			allInputs["sp_q"] = decodeURIComponent(allInputs["sp_q"])
					allInputs["sp_q"] = allInputs["sp_q"].replace("+","%2B");
        allInputs["sp_q"] = allInputs["sp_q"].replace("#","%23");
        allInputs["sp_q"] = allInputs["sp_q"].replace("/","%2F");
        allInputs["sp_q"] = allInputs["sp_q"].replace("&","%26");
        allInputs["sp_q"] = allInputs["sp_q"].replace("-","%2D");
			//allInputs["sp_q"] = encodeURIComponent(allInputs["sp_q"]);
		}
        var merged = merge(allInputs);
        var selectedListItem = $('#filter-by ul.dropdown-menu li.selected[data-original-index!=0]');
        if (selectedListItem.length > 0 ) {
            var category = $('#filter-by ul.dropdown-menu li.selected[data-original-index!=0]').find('a').attr('data-tokens');
            var subcategory = selectedListItem.text(); 
			//console.log(selectedListItem);
            merged.sp_x_2 = 'category';
            merged.sp_q_2 = category;
            merged.sp_x_3 = 'subcategory';
            merged.sp_q_3 = subcategory;
        }
		/*if(merged.sp_q_3 != "" && merged.sp_q_3 != undefined && merged.sp_q_exact_3 != "" && merged.sp_q_exact_3 != undefined) {
			merged.sp_q_exact_3 += "|"+merged.sp_q_3;
			merged.sp_q_exact_3 = merged.sp_q_exact_3.replace("||", "|");
		}*/
        //console.log('merged');
		//console.log("ERGED");
        //console.log(merged);
        return merged;
    };

    Parameters.prototype.fillUpSearchModalParameters = function($container) {
        var parameters = this.get('COMMON');

        var selectedListItem = $('#filter-by ul.dropdown-menu li.selected[data-original-index!=0]');
        if (selectedListItem.length > 0) {
            var category = $('#filter-by ul.dropdown-menu li.selected[data-original-index!=0]').find('a').attr('data-tokens');
            var subcategory = selectedListItem.text();
            //console.log(selectedListItem);
            parameters.sp_x_2 = 'category';
            parameters.sp_q_2 = category;
            parameters.sp_x_3 = 'subcategory';
            parameters.sp_q_3 = subcategory;
        }

        
        $.each(parameters, function(index, value) {
            var inpuItem = $('input[name=' + index + ']');
            if (typeof value != "undefined" && value != "" && !$($container).find(inpuItem).length) {
                if (typeof value == "object") {
                    $.each(value, function(arrayIndex, arrayValue) {
                        if (arrayValue != "") {
                            $($container).append('<input type="hidden" name="' + index + '" value="' + arrayValue + '" />');
                        }
                    });
                } else {
                    $($container).append('<input type="hidden" name="' + index + '" value="' + value + '" />');
                }
            }
        })

    };

    Parameters.prototype.refreshSnP = function() {
        var out = "?" + QS.serialize(this.buildSearchEngine());
        //console.log(out);
        //url =sitesearch;
        url = "/content/maximintegrated/en/sitesearch.html";
        // $.redirect(url, QS.serialize(this.buildSearchEngine()));
        /* $.ajax({
            url:url,
            async: true,
            type: "get",
            data: QS.serialize(this.buildSearchEngine()),
            success:function(response){
        }
               });
        //var newURL = window.location.pathname+"?"+QS.serialize(this.buildSearchEngine());
		//history.pushState(history.state,"",newURL);*/
        window.parameters.refreshCategories(out);
        //window.parameters.refreshProducts(1, "/bin/productsearch");
        window.parameters.assetRefresh(out);

    };  

Parameters.prototype.refreshCategories = function() {
        var out = "?"+QS.serialize(this.buildSearchEngine());
        var categoryRefreshUrl =categorysearchurl + out+ "&sp_x_11=generalsection&sp_q_exact_11=show&sp_p=all";

        $('#category-search-results .js-section-results').html("");
        $('#page-numbers-categories').html("");
        $('#search-results-type-title').html("");
         $('#category-search-results .js-section-results').prepend('<img id="search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">')
        $.ajax({
            url:categoryRefreshUrl,
            async: true,
            success:function(response){
                total = 0;
                response.checkboxFilter = true;                 
                $('#category-search-results .js-section-header').html("");
                $('#category-search-results .js-section-results').html("");
                Section.prototype.processCategories(response); 
                $('#category-search-results .js-section-results #search-spinner').remove();
                if(response.general)
                    total = parseInt(response.general.total, 10); 
                
                $("#page-numbers-categories").html("").html(createPages(window.parameters.sp_n, window.parameters.sp_c, total, "categories"));                
            }   
        });
        //var newURL = window.location.pathname+"?"+QS.serialize(this.buildSearchEngine());
		//history.pushState(history.state,"",newURL);

    };   

    Parameters.prototype.refreshProducts = function(newStart, productsPage) {  
        if (parameters.showAllProducts == 0) {
            		parameters.partLimit = $('#product-results-container').attr("data-items-limit") || 5;
        		}

        var productRefreshUrl = newProductSearchUrl;
        if ($('.products-search-spinner').length == 0) {
            $('#product-search-results .js-section-results').prepend('<img id="search-spinner" class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">')
        }
        $.ajax({
			type : 'POST',
            url: productRefreshUrl,
            async: true,
            data: QS.serialize(this.buildSearchEngine(newStart-1)),
            success: function(response) {
                var localSection = new Section();
                var parameters = new Parameters(QS.deserialize(window.location.search.substring(1)));
				localSection.parameters=parameters;
       		    localSection.template=templates.products;
                localSection.parameters.partPage = productsPage;
                totalPages = 0;
				console.log(response.partinfo);
                $('#product-search-results .js-section-header').html("").html(localSection.renderProductHeader(response));
                $('#product-search-results .js-section-results').html("").html(localSection.render(response.products));
                $('#product-search-results').show();
                //Section.prototype.processProducts(response);
                totalPages = Math.ceil(response.totalresults / parseInt(window.parameters.partLimit));
                response.numberOfPages = this.totalPages;
                //if (loaded === sectionNames.length) {
                //console.log(i+ ' inserting into $("#page-numbers-'+this.type+'")');
                //console.log($("#page-numbers-"+this.type ));
                $("#page-numbers-products").html("").append(createPages(newStart, parseInt(window.parameters.partLimit), response.totalresults, "products"));
            }
        });
    };

	Parameters.prototype.assetRefresh = function() {
        var out = "?"+QS.serialize(this.buildSearchEngine());

        $('#digital-asset-results-container .js-section-results').prepend('<img id="search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">')
        $("#page-numbers-assets").html("");
        $.ajax({
            url: assetsearchurl,
            async: true,
            method: 'POST',
            data: QS.serialize(this.buildSearchEngine()),
            success: function(response) {
				 if(response.hasaccess != undefined  && response.hasaccess == false){
                        $.cookie('hasaccesstoassetshare', response.hasaccess);
                        return false;	
                    }

               var  localSection= new Section();
               var results = {};
                this.total = parseInt(response.size,10);
                var hitArray = response.hits;
                var parameters = new Parameters(QS.deserialize(window.location.search.substring(1)));
                localSection.parameters = parameters;
                localSection.template = templates.assets;
                $("#page-numbers-assets").html("");
                $('#digital-asset-results-container .js-section-header').html("").html(localSection.renderAssetHeader(response));
                $('#digital-asset-results-container .js-section-results').html("").html(localSection.render(hitArray));
                $('#digital-asset-results-container').show();
                if (hitArray.length == 0) {
                    $('#assets-to-download').hide();
                    $('button[data-id=refine-filter-filetype]').parent().hide();
                }

                $('#search-filter, #search-filter-modal').selectpicker();

				 var varindex=parseInt(response.offset)-1;
                 $('.digital-asset-modal-header-buttons').each(function(index){  

                    var root = location.protocol + '//' + location.host; 
                    var bookmark=$(this).find("#assetmodal-blog-"+varindex);
                    //shareByAddthis('#assetmodal-blog-'+varindex, bookmark.attr("data-title"), root+bookmark.attr("data-id"), true);
                      $("a#assetmodal-mark-"+varindex).click(function(){
                      addBookmark(bookmark.attr("data-title"), root+bookmark.attr("data-id"));
                     });
        			 varindex++;
                 });

                    $("#page-numbers-assets").html("").html(createPages(response.offset, window.parameters.assetLimit, response.size, "assets"));

          },
           error: function () {
               		$('#digital-asset-results-container .js-section-results').html("");
					console.log('something went wrong in Section.prototype.assetRefresh');
          }

        });

    };

    function applyParameters() {
        if($("#search-bar").val()!="" || $("#search-bar-modal").val()!=""){
            parameters.refreshSnP();
        }
    }
	function setStartIndexProducts(pageLimit, startIndex) {
		window.parameters.sp_c=pageLimit;
		window.parameters.sp_n=startIndex;
		parameters.refreshProducts();
	}

    window.parameters = new Parameters(QS.deserialize(""));

    if (($("#search-bar").length > 0 && $("#search-bar").val() != "") || ($("#search-bar-modal").length > 0 && $("#search-bar-modal").val() != "")) {

        var queryString = "";
        if ($("#search-bar").val() != "") {
            queryString = $("#search-bar").val();
        } else {
            queryString = $("#search-bar-modal").val();
        }
        window.parameters.sp_q = queryString;

        var selectedCategoryValue = $('span.post_category').attr('data-attr-value');
        var selectedSubCategoryValue = $('span.post_subcategory').attr('data-attr-value');

        if (selectedCategoryValue != "") {
            window.parameters.sp_x_2 = "category";
            window.parameters.sp_q_2 = selectedCategoryValue;
        }

        if (selectedSubCategoryValue != "") {
            window.parameters.sp_x_3 = "subcategory";
            window.parameters.sp_q_3 = selectedSubCategoryValue;
        }

    }

    //Remove FOUC
    $('.no-fouc').removeClass('no-fouc');

    //Create select lists

    //Navbar shadow
    $(document).scroll(function () {
        if ($(document).scrollTop() >= 10) {
            $('.navbar').addClass("navbarshadow");
        } else {
            $('.navbar').removeClass("navbarshadow");
        }
    });

    $('.select-all-assets-to-download').click(function(event) {
        if (this.checked) {
            $('.download-item-checkbox').each(function() {
                this.checked = true;
            });
        } else {
           $('.download-item-checkbox').each(function() {
                this.checked = false;
            });
        }
    });

    $(document).on('click', '.pagenumcategories', function() {
        parameters.categoryPage = $(this).data('value');
        if(parameters.showAll == "false")
        	parameters.sp_c = parseInt($("#category-search-results .js-section-results").attr('numberofitemstodisplay'));
        parameters.sp_n=((parseInt($(this).data('value'))-1)*parameters.sp_c)+1;
        window.parameters.notLoadProduct = 1;
        parameters.refreshCategories();
    });
	$(document).on('click', '.pagenumassets', function(e) {
        parameters.assetPage = $(this).data('value');
        //applyParameters();
        parameters.assetRefresh();
    });
	$(document).on('click', '.pagenumproducts', function(e) {
        e.preventDefault();
        $('#product-search-results .js-section-results').html("").html('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
        var productsPage = $(this).data('value');
        parameters.partPage = productsPage;
        //parameters.partLimit = $('#product-results-container').data("items-limit");
        if (parameters.showAllProducts == 0) {
            parameters.partLimit = $('#product-results-container').data("items-limit") || 5;
        }
        var productsStart = ((parseInt($(this).data('value')) - 1) * parseInt(parameters.partLimit)) + 1;
        //$("#page-numbers-products a.pagenumproducts").each(function(i){$(this).html($(this).html().replace("<b>","").replace("</b>",""))})
        //$(this).html("<b>"+productsPage+"</b>");
        $("#show-product-range").text(Granite.I18n.get("viewing", [productsStart, (productsStart+parseInt(window.parameters.partLimit)-1 > productTotalResult ? productTotalResult : productsStart+parseInt(window.parameters.partLimit)-1), productTotalResult]));
        $("#page-numbers-products").html("").append(createPages(productsStart, parameters.partLimit, productTotalResult, "products"));
        renderRootPartInfo(parameters.partLimit, productsStart);
        //applyParameters();
    });
    $(document).on('click','#showAllProducts',function(e) {
    	var assetSection=$("#expand-digital-asset-results");
    	assetSection.click();
        var categorySection=$("#expand-category-results");
        categorySection.click();
        e.preventDefault();
        if(parameters.partPage != 0){
        	var productoffset=parameters.partPage*parameters.partLimit/$('#product-results-container').data("show-more-count") ||20;
            parameters.partPage=Math.round(productoffset);
        }
        parameters.partPage=Math.round(productoffset);
        $('#product-search-results .js-section-results').html("").html('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
        parameters.showAllProducts = 1;
        parameters.partLimit = $('#product-results-container').data("show-more-count") || 20;
        var productStart;
        if(parameters.partPage != 0){
        	 productStart = (parameters.partPage*parameters.partLimit)-parameters.partLimit+1;
        }else{
            productStart=1;
		}
        if(parameters.partPage == 1)
			productStart = 1;
        //$("#showAllProducts").remove();
        var showAll =' | <a href="#" id="hideAllProducts"> &lt; '+Granite.I18n.get("backtomain")+'</a>'; 
        $("#show-product-range").text(Granite.I18n.get("viewing", [productStart, (productStart+parseInt(parameters.partLimit)-1 > productTotalResult ? productTotalResult : productStart+parseInt(window.parameters.partLimit)-1), productTotalResult]));
        $("#show-more-hide-less-productsection").html("").html(showAll);
        $("#page-numbers-products").html("").append(createPages(productStart, parameters.partLimit, productTotalResult, "products"));
        renderRootPartInfo(parameters.partLimit, productStart);
    });
    $(document).on('click','#hideAllProducts',function(e) {
    	var assetSection=$("#expand-digital-asset-results");
     	assetSection.click();
        var categorySection=$("#expand-category-results");
        categorySection.click();
        e.preventDefault();
        $('#product-search-results .js-section-results').html("").html('<img class="products-search-spinner" src="/etc/designs/maximintegrated/_images/spiffy.gif" alt="Loading" style="display:block;padding-left: 50%;">');
        parameters.showAllProducts = 0;
        parameters.partLimit = $('#product-results-container').data("items-limit") || 5;
        var productStart;
        if(parameters.partPage != 0){
        	 productStart = (parameters.partPage*parameters.partLimit)-parameters.partLimit+1;
        }else{
            productStart=1;
		}
        if(parameters.partPage == 1)
			productStart = 1;
        //$("#showAllProducts").remove();
        var showAll = ' | <a href="#" id="showAllProducts">'+ Granite.I18n.get("showmore") + '&gt;</a>' ;
        $("#show-product-range").text(Granite.I18n.get("viewing", [productStart, (productStart+parseInt(parameters.partLimit)-1 > productTotalResult ? productTotalResult : productStart+parseInt(window.parameters.partLimit)-1), productTotalResult]));
        $("#show-more-hide-less-productsection").html("").html(showAll);
        $("#page-numbers-products").html("").append(createPages(productStart, parameters.partLimit, productTotalResult, "products"));
        renderRootPartInfo(parameters.partLimit, productStart);
    }); 

 $(document).on('click','#categoriesShowAll',function(e) {
        parameters.categoryPage = $(this).data('value');
     if(parseInt(parameters.sp_c)  === parseInt($("#category-search-results .js-section-results").data('show-more-count'))) {
         	if($("#expand-digital-asset-results").hasClass("collapsed"))
                $("#expand-digital-asset-results").trigger("click");
			if($("#expand-product-results").hasClass("collapsed"))
                $("#expand-product-results").trigger("click");
        	parameters.sp_c = parseInt($("#category-search-results .js-section-results").attr('numberofitemstodisplay'));
            parameters.showAll=false;
     }
     else {
			if(!$("#expand-digital-asset-results").hasClass("collapsed"))
                $("#expand-digital-asset-results").trigger("click");
         	if(!$("#expand-product-results").hasClass("collapsed"))
                $("#expand-product-results").trigger("click");
         	parameters.sp_c = parseInt($("#category-search-results .js-section-results").data('show-more-count'));
            parameters.showAll=true;
     }
       // parameters.sp_c = parseInt($("#category-search-results .js-section-results").data('show-more-count'));
        parameters.sp_n=1;
		window.parameters.notLoadProduct = 1;
        parameters.refreshCategories();
    }); 

    var sections = {
        products: {
            type:'products',
            title: Granite.I18n.get("product"),
            url: newProductSearchUrl,
            showAllText: $('document#product-results-container').data("show-all-text"),
            parameters: {
                type: 'products',
                sections: 'products',
                partLimit: $('#product-results-container').data("items-limit"),
                showAllProducts: parameters.showAllProducts,
                partOffset: 1,
                sp_n: 1, //don't need this here except for the templates loops for making pages...
                sp_c: 4,
                productFacetCountTemplate:"ProductFacetCount", // get product facet count details S&P template
                productListTemplate:"ProductList", // get product list details S&P 
                productSectiontemplate:"ProductSection",
                sp_x_8:"ProductSection", // get root part details S&P template
                sp_q_exact_8: "available", 
                sp_e: "3" //wild card search in S&P
            },
            canShow: true,
            template: templates.products,
            $container: $('#product-results-container'),
        },
        assets: {
            type:'assets',
            title: Granite.I18n.get("digitalAssets"),
            url: assetsearchurl,
            parameters: {
                type: 'assets',
                sections: 'assets',
                assetOffset: 1,
                sp_n: 1, //don't need this here except for the templates loops for making pages...
                sp_c: 4,               
            },
            canShow: showUserAssetShare(),
            template: templates.assets,
            $container: $('#digital-asset-results-container'),
        },
        categories: {
            type: 'categories',
            title: '',
            url: categorysearchurl,
            showAllText: $("#category-search-results .js-section-results").attr("showallbutton"),
            parameters: {
                type: 'categories',
                sections: 'categories',
                sp_c: parseInt($("#category-search-results .js-section-results").attr('numberofitemstodisplay')) || 20,
                sp_n: 0,
            },
            canShow: true,
            template: templates.categories,
            $container: $('#category-search-results'),
        },        
    };

    // fetch all results for each sections
    var sectionNames = ['products', 'assets', 'categories'];
    if (parameters.sections) {
        sectionNames = parameters.sections;
    }

    var max = undefined;
    var loaded = 0;
    //console.log('looping through sections');
    sectionNames.forEach(function(key) {
        //console.log('section: ' + key);
        if (sections[key] === undefined || key == "products") {
            return
        }
        var args = sections[key];
        args.url = args.url || 'https://search.atomz.com/search/';
        if (parameters.sections && parameters.sections.indexOf(args.parameters.sections) !== -1) {
            args.parameters.sp_c = parseInt($("#category-search-results .js-section-results").attr('numberofitemstodisplay'));
        }
        if (parameters.showAllProducts === "1") {
            args.parameters.partLimit = $('#product-results-container').data("show-more-count") || 20;
        }
        parameters.sections = parameters.sections || [];
        args.parameters.sections = parameters.sections.indexOf(args.parameters.sections) !== -1 ? undefined : args.parameters.sections;
        args.parameters = new Parameters(merge(parameters, args.parameters));

        var section = new Section(args);
        if (section.canShow) {
            section.fetch(function() {});
        }
        if (showUserAssetShare()) {
			$('#assets-to-download').show();
            $('#refine-filter-filetype').show();
        }
    });

    $(window).resize(function (){
        adjustImageHeight($('#digital-assets-results'));
    });

    $('#digital-asset-results-container').on('ready', function() {

        var $root = $(this);
        // need to wait for images to be loaded in order to have the height
        $(this).find('img').on('load', function() {
            adjustImageHeight($root);
        });
    });

    function adjustImageHeight($root){
        $root.find('.assets-row').each(function() {
            //alert("loaded");
            var $images = $(this).find('.digital-asset-img');
            var heights = $(this).find('img').map(function() { return $(this).height(); });
            var maxHeight = Math.max.apply(null, heights);
            $images.height(maxHeight);
        });

    }



    function createPages(n, count, total,type) {
        // following comments will use an example of 20 pages.
        var config = {
            displayed: 5,
        };

        var numberOfPages = Math.ceil(total / count);
        if (numberOfPages < config.displayed) {
			config.displayed = numberOfPages;
        }
        var current = Math.ceil(n / count);

        if (current > numberOfPages) {
			current=numberOfPages;
        }
        // find the middl-ish of the array
        var boundary = Math.ceil((config.displayed - 2) / 2);
        var start = current - boundary;
        // we don't want [-1, 0, 1, 2, 3]
        // when current = 1
        if (start < 1) {
            start = 1;
        }
        // same but for the last page
        if (start > Math.abs(numberOfPages - config.displayed)) {
            start = numberOfPages - config.displayed + 1;
        }

        var pages = [];

        // creating an array with current in the middle
        // current = 8 -> [6, 7, 8, 9, 10]
        for (var i = start; i < (start + config.displayed); i += 1) {
            pages.push(i);
        }

        // then replace both end of the array with first page and last page.
        // [1, 7, 8, 9, 20]
        if (pages[0] !== numberOfPages) {
            pages[pages.length - 1] = numberOfPages;
        }
        if (pages[0] !== 1) {
            pages[0] = 1;
        }

        var content = [];

        if (pages.length >1) {
            pages.forEach(function(page) {
                var str = page;
                // make sure first and second items DO NOT follow each other != [1,2]
                // in that case, we append ... to the first page
                if (page === 1 && pages[1] !== 2) {
                    str += '...';
                }
                // same as above but for the last page (with our previous example: [19, 20])
                if (page === numberOfPages && pages[pages.length - 2] !== (numberOfPages - 1)) {
                    str = '...' + str;
                }
                if (page === current) {
                    str = '<b>' + page + '<b>';
                }
                content.push('<div class="page-number '+ type + ' "><a class="pagenum'+ type + '" data-value="' + page + '">' + str + '</a></div>');
            });
    
            if (current > 1) {
                content.unshift('<div class="page-number '+ type + ' "><a class="pagenum'+ type + ' gray" data-value="' + (current - 1) + '">&lt; '+Granite.I18n.get("previousPage")+'</a></div>');
            }
    
            if (current !== numberOfPages) {
                content.push('<div class="page-number '+ type + ' "><a class=" gray pagenum'+ type + ' " data-value="' + (current + 1) + '">'+ Granite.I18n.get("nextPage")+' &gt;</a></div>');
            }
        }

        return content;
    }


    //Set search query
    $("div#search-bar-container #search-form").submit(function () {
         if($('input#search-bar').val() == "" || $('input#search-bar').val() == "undefined" || $('input#search-bar').val() === undefined) {
            if(isPublish) { 
        	 window.location =  "/"+lang+"/sitesearch.html";
             return false;
        }else{
			 window.location = '/content/maximintegrated/'+lang+"/sitesearch.html";
            return false;
        }
        }
    	window.parameters.extensions="";
 		window.parameters.sp_date_range="";
        window.parameters.sp_q = $('#search-bar').val() || $('#search-bar-modal').val();
        window.parameters.sp_q = window.parameters.sp_q.replace("+","%2B");
        window.parameters.sp_q = window.parameters.sp_q.replace("#","%23");
        window.parameters.sp_q = window.parameters.sp_q.replace("/","%2F");
        window.parameters.sp_q = window.parameters.sp_q.replace("&","%26");
        window.parameters.sp_q = window.parameters.sp_q.replace("-","%2D");
		//window.parameters.sp_q = encodeURIComponent(window.parameters.sp_q);//.replace("+","%2B");
		window.parameters.q = $('#search-bar').val() || $('#search-bar-modal').val();
		window.parameters.q = window.parameters.q.replace("+","%2B");
        delete window.parameters.assetPage;
        delete window.parameters.assetOffset;
		window.parameters.assetPage=1;
        window.parameters.assetOffset=0;
        window.parameters.sp_n=1;
        window.parameters.categoryPage=1;
		var formSubmitUrl = sitesearch+"?sp_q="+window.parameters.sp_q;
        var cateUrl = "";
        var subCateUrl = ""
        //removing  all filters.
        if ($('#search-filter').selectpicker('val')!='') {
            var vals = $('#search-filter').selectpicker('val').split(":");
            window.parameters.filters = vals[0] + "";
            window.parameters.sp_x_2 = 'category';
			window.parameters.sp_q_2 = vals[1];
			cateUrl = "sp_x_2=category&sp_q_2="+vals[1];
            formSubmitUrl = formSubmitUrl+"&"+cateUrl;
            if (vals[1]) {
                window.parameters.sp_x_3 = 'subcategory';
				window.parameters.sp_q_3 = vals[2];
				 subCateUrl = "sp_x_3=subcategory&sp_q_3="+vals[2];
                formSubmitUrl = formSubmitUrl+"&"+subCateUrl;
            }
        } else {
			delete window.parameters.filters;
            delete window.parameters.sp_x_2;
            delete window.parameters.sp_q_2;
            delete window.parameters.sp_x_3;
            delete window.parameters.sp_q_3;
        }
	 $(".reset-filters-button").trigger('click');
		$(this).attr('action', formSubmitUrl);
        window.parameters.fillUpSearchModalParameters(this);
        return true;
    });

	$("#search-modal #search-form").submit(function () {
        if($('input#search-bar-modal').val() == "" || $('input#search-bar-modal').val() == "undefined" || $('input#search-bar-modal').val() == undefined) {
            if(isPublish) { 
        	 window.location =  "/"+lang+"/sitesearch.html";
             return false;
        }else{
			 window.location = '/content/maximintegrated/'+lang+"/sitesearch.html";
            return false;
        }
        }
		window.parameters.extensions="";
		window.parameters.sp_date_range="";
        window.parameters.sp_q =$('#search-bar-modal').val();
		window.parameters.sp_q = window.parameters.sp_q.replace("+","%2B");
        window.parameters.sp_q = window.parameters.sp_q.replace("#","%23");
        window.parameters.sp_q = window.parameters.sp_q.replace("/","%2F");
        window.parameters.sp_q = window.parameters.sp_q.replace("&","%26");
        window.parameters.sp_q = window.parameters.sp_q.replace("-","%2D");
		//window.parameters.sp_q = encodeURIComponent(window.parameters.sp_q);//.replace("+","%2B");
		window.parameters.q =$('#search-bar-modal').val();
		window.parameters.q = window.parameters.q.replace("+","%2B");
		var formSubmitUrl = $("#search-modal #search-form").attr("action")+"?sp_q="+window.parameters.sp_q;
        var cateUrl = "";
        var subCateUrl = ""
        if ($('#search-filter-modal').selectpicker('val')!='') {
            var vals = $('#search-filter-modal').selectpicker('val').split(":");
            window.parameters.filters = vals[0] + "";
            window.parameters.sp_x_2 = 'category';
			window.parameters.sp_q_2 = vals[1];
			cateUrl = "sp_x_2=category&sp_q_2="+vals[1];
            formSubmitUrl = formSubmitUrl+"&"+cateUrl;
            if (vals[1]) {
                window.parameters.sp_x_3 = 'subcategory';
				window.parameters.sp_q_3 = vals[2];
				subCateUrl = "sp_x_3=subcategory&sp_q_3="+vals[2];
                formSubmitUrl = formSubmitUrl+"&"+subCateUrl;
            }
        } else {
			delete window.parameters.filters;
            delete window.parameters.sp_x_2;
            delete window.parameters.sp_q_2;
            delete window.parameters.sp_x_3;
            delete window.parameters.sp_q_3;
        }
		$("#search-modal #search-form").attr("action", formSubmitUrl);
        window.parameters.fillUpSearchModalParameters(this);
        return true;

    });

    //Setting search query display and result data
	
    if (parameters.sp_q) {
        $("#breadcrumb-query, .product-query, #category-query").html(parameters.sp_q.replace("%2B","+"));
        $("#search-bar").val(parameters.sp_q.replace("%2B","+"));
        $("#search-bar-modal").val(parameters.sp_q.replace("%2B","+"));
    }

    //Filter panels
    $('#main-menu-expand-button').on('click', function() {
        $('#main-menu .panel-heading').hide();
        //$(this).hide();
        $('#leftmenu #accordion2').show();
    });

    $('#filter-expand-button').on('click', function() {
        if($("#main-menu-expand").hasClass("in")){
            $('#main-menu .panel-heading').show();
        }
    });
	
	$('#filter-expand-mobile-button').on('click', function() {
        if($("#filter-results-mobile-expand").hasClass("in")){
            $('#main-menu .panel-heading').show();
        }
    });

     $('.reset-filters-button').on('click', function() {
         parameters.filters = [];
         applyParameters();
     });

    // Refine by time
    $('.reset-refine-button').on('click', function() {
        $('#refine-filter-time, #refine-filter-time-mobile, #refine-filter-filetype, #refine-filter-filetype-mobile').val('').change();
    });

    $('#refine-filter-time, #refine-filter-time-mobile').selectpicker({
        size: 5
    });

    if (parameters.sp_date_range) {
        $('#refine-filter-time, #refine-filter-time-mobile').val(parameters.sp_date_range).change();
    }

    $('#refine-filter-time, #refine-filter-time-mobile').on('change', function() {
        var value = $(this).val();
        value = value === '' ? undefined : value;
        parameters.sp_date_range = value;
        applyParameters();
    });

    // Refine by extension
    $('#refine-filter-filetype-mobile').selectpicker({
        size: 7
    });
    if (showUserAssetShare()) {
        $('#refine-filter-filetype').selectpicker({
            size: 7
        });
    }

    if (parameters.extensions) {
        $('#refine-filter-filetype, #refine-filter-filetype-mobile').val(parameters.extensions).change();
    }

    $('#refine-filter-filetype, #refine-filter-filetype-mobile').on('change', function() {
        var value = $(this).val();
        value = value === '' ? undefined : value;
        delete window.parameters.assetPage;
        parameters.extensions = value;
        window.parameters.assetPage=1;
        //applyParameters();
        window.parameters.assetRefresh();
        if(parameters.assetLimit == 4){
            var productSection=$("#expand-product-results");
            productSection.click();
            var categorySection=$("#expand-category-results");
            categorySection.click();
         }
    });

    //Sorting
    $('#sort-filter').selectpicker({
        size: 2
    });

    if (parameters.sp_s) {
        $('#sort-filter').val(parameters.sp_s).change();
    }

    $("#sort-filter").change(function () {
        parameters.sp_s = $("#sort-filter").val();
        applyParameters();
    });

    $('#reset-filter-button').on('click', function() {
        parameters.filters = undefined;
        applyParameters();
    });

    //Autocomplete
    $('#autocomplete-searchbar').hide();
    function autocomplete(response) {
        //console.log('in autocomplete function');
        //var autoresults = response.results;
        //console.log(response);
        $('.autocomplete-suggestion-list').html("");
        var arrayAutoComplete = response.replace("( [ ","").replace(" ] )","").split(",");
        if (arrayAutoComplete.length <= 1 && arrayAutoComplete[0] === "") {
        //autocomplete-suggestions
			$('#autocomplete-suggestions').hide();
        } else {

			$('#autocomplete-suggestions').show();
            arrayAutoComplete.forEach(function(item) {
                item = item.replace(/\"/g,"");
                //console.log(item);
                $('.autocomplete-suggestion-list').append(
                    '<li><a href="./'+sitesearch+'?sp_q=' + item + '"><span id="recent-search-icon" class="glyphicon glyphicon-file" aria-hidden="true"></span>' + item + '</a></li>'
                );
            });
        }
    }

    $('#search-bar').on('keyup', function () {

        if (($(this).val().length) > 3) {
            $('#autocomplete-searchbar').show();
/*            $.ajax({
                dataType: "text",
                url: autocompleteurl +'?query='+$(this).val()+'&max_results=10&beginning=1&sp_x_1=language&sp_q_1'+getSnPLanguage(),
                success: autocomplete,
                   error: function(xhr, textStatus, errorthrown) {
                		console.log(xhr);
                		console.log(textStatus);
                		console.log(errorthrown);
            		}	
            });*/
        } else {
            $('#autocomplete-searchbar').hide();
        }
    });

    $('#autocomplete-searchbar-modal').hide();
    
    $('#search-bar-modal').on('keyup', function () {
        if (($(this).val().length) > 3) {
            $('#autocomplete-searchbar-modal').show();
/*            $.ajax({
                dataType: "text",
                url: autocompleteurl +'?query='+$(this).val()+'&max_results=10&beginning=1&sp_x_1=language&sp_q_1=en_US',
                success: autocomplete,
                   error: function(xhr, textStatus, errorthrown) {
                		console.log(xhr);
                		console.log(textStatus);
                		console.log(errorthrown);
            		}
            });*/
        } else {
            $('#autocomplete-searchbar-modal').hide();
        }
    });

    $('body').click(function (e) {
        if ($(e.target).closest('#autocomplete-searchbar').length === 0) {
            $('#autocomplete-searchbar').hide();
        }
    });

    //Adding assets to download
    var assetsToDownload = new ArrayStorage('assetsToDownload');
    var assetToDownloadArray = assetsToDownload.get();

    assetToDownloadArray.forEach(function(asset) {
        $('.js-assets').append(templates.asset(asset));
    });

    $(document).on('click', '.download-asset-button-add', function() {
        var id = $(this).attr("data-id");
        assetToDownloadArray = assetsToDownload.get();
        if (!assetToDownloadArray.find(function(assetsToDownload) {
                return id === assetsToDownload.id
            })) {
            var title = $(this).attr("data-title");
            var img = $(this).attr("data-image");
            var asset = {
                title: title,
                img: img,
                id : id
            };
            assetsToDownload.push(asset);
            $('.js-assets').append(templates.asset(asset));
            $('#messageDiv').html(Granite.I18n.get("assetAdded") + " <br><br> <a href=\"#assets-to-download\">"+CQ.I18n.get("gotoList")+"</a>");
            $("#messageDiv").dialog({
                height: 180,
                width:450,
                modal: false,
                open: function(event, ui){
                    setTimeout("$('#messageDiv').dialog('close');$('#messageDiv').dialog('destroy')",2000);
                }
            });
            $('#messageDiv').parent().find(".ui-dialog-titlebar").hide();
            $($('#messageDiv').parent()).css("z-index","2000");
            $('#messageDiv').dialog('open');
        }else{
        	$('#messageDiv').html(Granite.I18n.get("assetAlreadyAdded") +" <br><br> <a href=\"#assets-to-download\">"+CQ.I18n.get("gotoList")+"</a>");
            $("#messageDiv").dialog({
                height: 180,
                width:450,
                modal: false,
                open: function(event, ui){
                    setTimeout("$('#messageDiv').dialog('close');$('#messageDiv').dialog('destroy')",2000);
                }
             });
            $('#messageDiv').parent().find(".ui-dialog-titlebar").hide();
            $($('#messageDiv').parent()).css("z-index","2000");
            $('#messageDiv').dialog('open');
        }
    });

    $(document).on('click', '.js-delete-button', function() {
        var checkedAssets = $(".download-item-checkbox:checked").map(function() {
            return $(this).val();
        }).get();
        assetToDownloadArray = assetsToDownload.get();
        var assetsToKeep = assetToDownloadArray.filter(function (assetsToDownload) {
            return checkedAssets.indexOf(assetsToDownload.id) === -1;
        });
        assetsToDownload.set(assetsToKeep);
        assetToDownloadArray = assetsToDownload.get();
        $('.js-assets').html('');
        $('.select-all-assets-to-download').prop('checked', false);
        assetToDownloadArray.forEach(function (asset) {
            $('.js-assets').append(
                templates.asset(asset)
            );
        });
    });
    $(document).on('click','.js-download-button',function() {
		//console.log('js-download-button  clicked');
		assetToDownloadArray = assetsToDownload.get();
		var url="";
        if(isPublish) { 
        	 url = '/'+getPublicUrlLanguage()+'/appservice/productservice/_jcr_content.downloadfiles.json?';
        }else{
			 url = '/content/maximintegrated/en/appservice/productservice/_jcr_content.downloadfiles.json?';
        }
        var checkedAssets = $(".download-item-checkbox:checked").map(function() {
            return $(this).val();
        }).get();
        //console.log('checkedAssets');
		//console.log(checkedAssets);
        checkedAssets = $.unique(checkedAssets);
		//console.log(checkedAssets);
        if(checkedAssets.length > 0) {
            checkedAssets.forEach(function (asset) {
                url+='paths='+asset+'&';
            });
            //console.log(url);
        	window.open(url);
        } else {
            var message = 'must select one item';
			//console.log(message);
            alert(message);
        }
    });
	//download-asset-button download-asset-button-download clicked
	$(document).on('click','.download-asset-button-download',function() {
        var id = $(this).attr('data-id');

        if (id.match(/\.(jpg|jpeg|png|gif)$/)){

            var a = document.createElement('a');
            a.href = id;
            var n = id.lastIndexOf("/");
            a.download = id.substring(n+1);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);



        }else{
        	window.open(id);
        }
    });

    $('#digital-asset-modal-1').on('shown.bs.modal',function(e) {
		console.log('shown modal');
    })
	$("#searchModal").on("show.bs.modal", function(e) {
		$("#search-bar-modal").val("");
		 $("#search-filter-modal").val("").prop("selected",true);
		 $("#search-modal span.filter-option").text($("#search-filter-modal option:selected").text());
	});

	$("#searchModal").on("shown.bs.modal", function(e) {
		$('#search-bar-modal').focus();
	});



});

$(document).ready(function() {
    //Store recent searches and display on the sidebar and "autocomplete" bar
    var options = {
        numberOfRecentSearches: parseInt($('#recent-searches-list').attr('recentsearchesnumber'),5) || 5,
    };

    var parameters = window.parameters;
    var recents = new ArrayStorage('recents');
    var recentSearches = recents.get();

    if (parameters.sp_q && parameters.sp_q !== recentSearches[0]) {
        recents.unshift(parameters.sp_q);
        if (recents.get().length > options.numberOfRecentSearches) {
            recents.pop();
        }
    }
	var count = 0;
    if (recentSearches.length === 0) {
        $('#recent-search-container, #autocomplete-recent-searches').addClass("hide-recent-searches");
    } else {
        $('#recent-search-container, #autocomplete-recent-searches').removeClass("hide-recent-searches");
        recentSearches.forEach(function(recentSearch) {

			if(count < options.numberOfRecentSearches)  {
            $('#autocomplete-recent-search-list, #recent-searches-list').append(
                '<li>' +
                    '<a href="javascript:initiateFormSubmit(\''+recentSearch+'\')" >' +
                        '<span id="recent-search-icon" class="glyphicon glyphicon-search" aria-hidden="true"></span>' + recentSearch + '' +
                    '</a>' +
                '</li>'
            );
            count++;
		}
        });
    }
});
//*****************************/
//  Start filters.js
//*****************************/

var taguse = "searchtagsfilters";
var storagemMechanism = sessionStorage;
var MXclearLocalStorage = function() {
		delete storagemMechanism.products;
		delete storagemMechanism.markets;
		delete storagemMechanism.design;
		delete storagemMechanism.support;
		delete storagemMechanism.about;
}
MX = MX || {};
MX.facetnames = MX.facetnames || {};
$(document).ready(function() {
    /**
     * filters are defined like a tree
     * structured like:
     * { name: ..., children: [ { name: ...., children: [...] } ] }
     */
    var storeNeedsRefresh=false;
	var havesessionStorage = false;
    var currentTimeStamp=(new Date).getTime();
    var lastUpdatedLocalStore=(new Date).getTime();
	if (typeof(Storage) !== "undefined") {
        havesessionStorage = true;
        if (sessionStorage.lastMaxUpdated) {
			lastUpdatedLocalStore = storagemMechanism.lastMaxUpdated;
            if (currentTimeStamp-lastUpdatedLocalStore > 86400000) {
				storeNeedsRefresh = true;
            }	
        }
    } else {
        // Sorry! No Web Storage support..
    }
    if (havesessionStorage && storeNeedsRefresh) {
        MXclearLocalStorage();
    }

	var productsurl=sitesearch.replace(".external.html","")+"/_jcr_content."+taguse+".json?category=products&depth=2";
    var products = {} ;
    if (havesessionStorage && storagemMechanism.products) {
            products = JSON.parse(storagemMechanism.products);
    }
    if (typeof products.category==='undefined') {
    	$.ajax(
        { url: productsurl,
         async: false,
          success: function(data) {
            products = data;
            storagemMechanism.products = JSON.stringify(products);

          }}
         );
    }
	var marketsurl=sitesearch.replace(".external.html","")+"/_jcr_content."+taguse+".json?category=markets&depth=2";
    var markets = {};
    if (havesessionStorage && storagemMechanism.markets) {
            markets = JSON.parse(storagemMechanism.markets);
    }
    if (typeof markets.category==='undefined') {
       $.ajax(
        { url: marketsurl,
         async: false,
          success: function(data) {
            markets = data;
            storagemMechanism.markets = JSON.stringify(markets);

          }}
         );
    }
	var designurl=sitesearch.replace(".external.html","")+"/_jcr_content."+taguse+".json?category=design&checkbox=true&depth=1";
	var design = {};
    if (havesessionStorage && storagemMechanism.design) {
            design = JSON.parse(storagemMechanism.design);
    }
    if (typeof design.category==='undefined') {
        $.ajax(
        { url: designurl,
         async: false,
          success: function(data) {
            design = data;

            storagemMechanism.design = JSON.stringify(design);

          }}
         );
    }
	var supporturl=sitesearch.replace(".external.html","")+"/_jcr_content."+taguse+".json?category=support&checkbox=true&depth=1";
    var support = {};
    if (havesessionStorage && storagemMechanism.support) {
        support = JSON.parse(storagemMechanism.support);
    }
    if (typeof support.category==='undefined') {
        $.ajax(
        { url: supporturl,
         async: false,
          success: function(data) {
            support = data;
            storagemMechanism.support = JSON.stringify(support);

          }}
         );
    }

	var aboutturl=sitesearch.replace(".external.html","")+"/_jcr_content."+taguse+".json?category=about-us&checkbox=true&depth=1";
	var about = {};
    if (havesessionStorage && storagemMechanism.about) {
        about = JSON.parse(storagemMechanism.about);
    }
    if (typeof about.category==='undefined') {
        $.ajax(
        { url: aboutturl,
         async: false,
          success: function(data) {
            about = data;
            storagemMechanism.about = JSON.stringify(about);

          }}
         );
    }

    var digital = {
        displayname: Granite.I18n.get("digitalAssets"),
        name:'digitalassets',
        category:'digitalassets',
        categoryname:'digitalassets',
        show: true,
        currentdepth: 0,
        count: 5,
        checkbox: true,
        style: {background: '#f0efee'},
        children: [
            {
                displayname: Granite.I18n.get("salesPresen"),type:'subcategory',subcategory:'sales-presentations',subcategoryname:'sales-presentations', count: 1, checkbox: true, currentdepth: 1
            },
            {
                displayname: Granite.I18n.get("fieldMarketingPresen"),type:'subcategory',subcategory:'field-marketing-presentations',subcategoryname: 'field-marketing-presentations', count: 1, checkbox: true, currentdepth: 1
            },
            {
                displayname: Granite.I18n.get("images"),type:'subcategory', count: 1,subcategory:'images',subcategoryname: 'images', checkbox: true, currentdepth: 1
            },
            {
                displayname: Granite.I18n.get("ebriefs"),type:'subcategory', count: 1,subcategory:'ebriefs',subcategoryname: 'ebriefs', checkbox: true, currentdepth: 1
            },
            {
                displayname: Granite.I18n.get("corporate"),type:'subcategory', count: 1,subcategory:'corporate',subcategoryname: 'corporate', checkbox: true, currentdepth: 1
            },
            {
                displayname: Granite.I18n.get("video"),type:'subcategory', count: 1,subcategory:'videos',subcategoryname: 'videos', checkbox: true, currentdepth: 1
            }
        ]
    };

    var filters = {
        name: 'root',
        children: [
            products,
            markets,
            design,
            support,
            about
        ]
    };
    
    var checkboxFilter = {
        name: 'root',
        children: [            
            design,
            support,
            about
        ]
    };

     var assetfilters = {
        name: 'root',
        children: [
            digital
        ]
    };

    //build the assets in the forms...

    function buildCategoryFilters(filters, depth) {
        var output = '';
        if (filters.children) {
            for (var j =0; j< filters.children.length;j++) {
                var category = filters.children[j];
                if (category.currentdepth ==0) {
				var displayparent = category.displayname;
				var urllanguage = getUrlLanguage();
				if (urllanguage ==='en') {
					displayparent = category.displayname;
				} else if ((urllanguage ==='ja' || urllanguage ==='jp')&& category.displayname_japanese) {
					displayparent = category.displayname_japanese;
				} else if ((urllanguage ==='cn' || urllanguage ==='zh')&& category.displayname_chinese) {
					displayparent = category.displayname_chinese;
				}
                    //var displayparent = category.displayname;
                    var selectedcategory = '';
					var selectedCategoryValue = $('span.post_category').attr('data-attr-value');
					
					var selectedSubCategoryValue = $('span.post_subcategory').attr('data-attr-value');
					
                    if (((window.parameters.sp_q_2 && category.categoryname == window.parameters.sp_q_2) || selectedCategoryValue == category.categoryname)  && window.parameters.sp_q_3 && window.parameters.sp_q_3==='' && selectedSubCategoryValue == '') {
                            selectedcategory = 'selected="selected"';
                    }
                    output +='<option class="parent-category" value="'+j+':'+category.category+'" data-tokens="'+category.category+'" ' +selectedcategory+ '>'+displayparent+'</option>\n';
                    if (category.children) {
                        for (var i = 0; i < category.children.length; i++) {
                            var subcategory = category.children[i];
                            var subcategorydisplay = subcategory.displayname;
							if (urllanguage ==='en') {
								subcategorydisplay = subcategory.displayname;
							} else if ((urllanguage ==='ja' || urllanguage ==='jp')&& subcategory.displayname_japanese) {
								subcategorydisplay = subcategory.displayname_japanese;
							} else if ((urllanguage ==='cn' || urllanguage ==='zh')&& subcategory.displayname_chinese) {
								subcategorydisplay = subcategory.displayname_chinese;
							}
                            var selectedsubcategory = "";
                            if (((window.parameters.sp_q_2 && category.categoryname == window.parameters.sp_q_2) || selectedCategoryValue == category.categoryname) && ((window.parameters.sp_q_3 && window.parameters.sp_q_3==subcategory.subcategoryname) || subcategory.subcategoryname == selectedSubCategoryValue )) {
                                selectedsubcategory = 'selected="selected"';
                            }
                            if(typeof subcategory.subcategoryname !== "undefined"){
                           		 output +='<option class="sub-category" value="'+j+'-'+i+':'+category.category+':'+subcategory.subcategoryname+'" data-tokens="'+category.category+':'+subcategory.subcategoryname+'" ' +selectedsubcategory+'>'+subcategorydisplay+'</option>\n';
                            }    
                        }
                    }
				}
            }
        }
        
		return output;
    }


    var formcategoryhtml ='<option class="search-filter-title" value="">'+Granite.I18n.get("allCateg")+'</option>'+buildCategoryFilters(filters);

    if (showUserAssetShare()) {
		//filters.children.push(digital);
        formcategoryhtml+=buildCategoryFilters(assetfilters);
	}

	$('#search-filter, #search-filter-modal').html(formcategoryhtml);
	$('#search-filter, #search-filter-modal').selectpicker();

    $("div.dropdown-menu > ul.dropdown-menu li").each(function(index, value){

        if($(this).find("a.parent-category").length > 0){
            $(this).addClass("nohightlight");
            var $text=$(this).find("a.parent-category").html();
             $(this).on('click', function(e){
          			  e.preventDefault();
                 	  e.stopPropagation();
       	    });
            $(this).html($text);
			$(this).find("span.glyphicon").remove();

        }
    });

    /**
     * Debugging functions to print resutls in the console
     */
    function indent(length) {
        var output = ''
        for (var i = 0; i < length; i += 1) {
            output += ' ';
        }
        return output;
    }

    function print(child, depth) {
        var prefix = '';
        var style = [];

        child.show && style.push({color: 'blue'});
        child.active && style.push({ color: 'green' });
        child.exact && style.push({color: 'red'});

        if (style.length) {
            prefix = '%c';
            style = style.map(function(property) {
                var output = [];
                for (var key in property) {
                    output.push(key + ': ' + property[key]);
                }
                return output;
            }).reduce(function(prev, curr) {
                return prev.concat(curr);
            });
        }

        var next = child.next ? ' >' : '';
        var back = child.back ? '< ' : '';
        var check = child.checked ? 'â˜‘ï¸Ž ' : child.indeterminate ? '- ' : child.checkbox ? 'â˜ ' : '';
        //console.log(prefix + indent(depth * 2) + back + check + child.name + ' ' + child.strPath + next, style.join(';'));
    }

    /**
     * Pre-process filters
     * prev: filters
     * indexes: Array<Int>
     * depth: Int
     */
    function scan(prev, indexes, depth) {
        depth = depth || 0;
		var depthtab =  Array(depth).join("\t");
        var checkedFlag = "false";
        if(prev.checkedFlag)
            checkedFlag = prev.checkedFlag;
             
        if (prev.children) {
            //console.log(prev);
            prev.children.map(function(child, i) {
                child.path = prev.path || [];
                child.path = child.path.concat([i]);
                child.strPath = child.path.join('-');
				child.parent = prev.name;
                indexes.forEach(function(index) {
                    if (!child.active && (prev.active || depth === 0)) {
                        child.active = (child.strPath === index.slice(0, depth + 1).join('-'));
                    }
                    if (!child.exact) {
                        child.exact = (child.strPath === index.join('-'));
                    }
                });

                if (prev.exact || (prev.active && prev.checkbox)) {
                    child.show = true;
                }

                var countout = 0;
                if (typeof MX.currentFacetsFixed[child.type] !== 'undefined' && typeof MX.currentFacetsFixed[child.type][child.name]!=='undefined') {
                	if (MXdebug) console.log(depthtab+'MX.currentFacetsFixed["'+child.type+'"]["'+child.name+'"] = ' + MX.currentFacetsFixed[child.type][child.name]);
                    countout = MX.currentFacetsFixed[child.type][child.name];
                }
                if(checkedFlag == "false")
                     child.countout = countout;
                else if(checkedFlag == "true" && child.parent != "design" && child.parent != "support" && child.parent != "about-us")
                    child.countout = countout;
                else
                    child.countout = child.countout;
                if (child.active && child.children) {
                    child.back = true;
                } else {
                    var nextvar = child.children !== undefined;

                    if (MXdebug)  console.log(depthtab + 'child.name = '+ child.name + ' nextvar=' + nextvar);
					child.next = nextvar;
                }

                if (child.checkbox) {
                    if (child.exact) {
                        child.checked = true;
                    } else {
                        child.checked = prev.checked;
                    }
                }
                //console.log('MX.currentFacetsFixed');
				//console.log(MX.currentFacetsFixed);
                child.checkedFlag = checkedFlag;
                print(child, depth);
                scan(child, indexes, depth + 1,null);
            });
            var checked = prev.children.filter(function(c) { return c.checked === true; }).length;
            if (checked !== 0) {
                prev.indeterminate = checked !== prev.children.length;
                prev.checked = checked === prev.children.length;
                prev.checked = true;
            }
        }
    }

    /** check/uncheck a filter (and its children if needed)
     * path: Array<Int>
     * node: filters
     * checked: Boolean
     */
    function check(path, node, checked) {
        if (path.length !== 0) {
            var head = path.shift();
            var children = node.children;
            var checkboxes = children.filter(function(child) {
                return child.checked === true;
            });
            if (node.checkbox) {
                var all = (checkboxes.length !== children.length);
                node.checked = checkboxes.length === children.length;
                node.indeterminate = all;
            }
            return check(path, children[head], checked);
        }
        if (node.checkbox) {
            node.checked = checked;
            if (node.children) {
                node.children.forEach(function(child) {
                    child.checked = checked;
                    child.exact = checked;
                    check([], child, checked);
                });
            } else {
                node.exact = checked;
            }
        }
        return node;
    }

    // input: a string like "0-0-0", output: [0, 0, 0] (array of integer)
    function deserialize(list) {
        return list.split('-').map(function (i) {
            return parseInt(i, 10);
        });
    }

    // recursively find a filter from an array of int
    function find(path, node) {
        if (path.length !== 0) {
            var head = path.shift();
            if( node.children[head]) {
            	node.children[head].selected = true;
            }
            return find(path, node.children[head]);
        }
        return node;
    }

    function findactive(path, node, status) {
        console.log("oath us" +path);
        if (path.length !== 0) {
            var head = path.shift();
            if( node.children[head]) {
            	node.children[head].selected = true;
                if(status == false)
                    node.children[head].active = true;

            }
            return findactive(path, node.children[head], status);
        }
        return node;
    }

    // find all filters that are needed for the new query parameters
    function build(node, paths) {
        paths = paths || [];
        if (node.exact) {
            paths.push(node.strPath);
        }
        if (node.children) {
            node.children.forEach(function(child) {
                return build(child, paths)
            })
        }
        return paths;
    }

	// find all filters that are needed for the new query parameters
    function buildObject(node, paths) {
        paths = paths || {};
        if (node.exact) {
            paths['filterstr'] =[node.strPath];
        } 
        if (node.selected) {
            if (node.categoryname) {
				paths['category'] = node.categoryname;
            }
            if (node.subcategoryname) {
				paths['subcategory'] = node.subcategoryname;
            }
            if (node.subsubcategoryname) {
				paths['subsubcategory'] = node.subsubcategoryname;
            }
            if (node.s3category) {
				paths['s3category'] = node.s3category;
            }
            if (node.s4category) {
				paths['s4category'] = node.s4category;
            }
            if (node.s5category) {
				paths['s5category'] = node.s5category;
            }
            if (node.s6category) {
				paths['s6category'] = node.s6category;
            }
        }
        if (node.children) {
            node.children.forEach(function(child) {
                return buildObject(child, paths)
            });
        }
        return paths;
    }
    
    function buildObject2(node, paths) {
        paths = paths || {};
       
        if (node.checked) {             
            if (node.subcategoryname) {
                if(paths['subcategory'] && node.subcategoryname) {
                    paths['subcategory'] = paths['subcategory'] + "|" +node.subcategoryname;
                } else if(node.subcategoryname) {
                    paths['subcategory'] = node.subcategoryname;
                }
				
            }
           
        }
        if (node.children) {
            node.children.forEach(function(child) {
                return buildObject2(child, paths)
            });
        }
        return paths;
    }


   function buildObjectstrpath(node, paths) {
        paths = paths || {};
       
        if (node.checked) {             
            if (node.strPath) {
                if(paths['strPath'] && node.strPath) {
                    paths['strPath'] = paths['strPath'] + "|" +node.strPath;
                } else if(node.subcategoryname) {
                    paths['strPath'] = node.strPath;
                }
				
            }
           
        }
        if (node.children) {
            node.children.forEach(function(child) {
                return buildObjectstrpath(child, paths)
            });
        }
        return paths;
    }

    function resetNodes(node) {
		if (node.exact) {
            node.exact = false;
        }
        node.selected = false;
        node.active = false;
        node.checked = false;

		if (node.children) {
            node.children.forEach(function(child) {
                resetNodes(child);
            })
        }
    }

    var discardedFilters = window.parameters.filters.map(function (current) {
        return find(deserialize(current), filters);
    }).filter(function(filter) {
        if (typeof filter === 'undefined'){
			return;
        }
        return !filter.checkbox;
    });
    
    //checkbox filter function starts here
    $(document).on("click", '.js-checkbox-filter', function(event){
        
            var element=event.toElement;
            var elementName="";

            if(element != undefined){
              elementName=element.localName;
            }else{
            	elementName=event.target.localName;
            }
        if(elementName != "input"){return};
        if($(this).attr("category") === "digitalassets"){  
			filters.children.push(digital);
        }
        filters.checkedFlag = "true";        
       var path  = deserialize($(this).data('path')); 
       var $checkbox = $(this).find('input[type=checkbox]');
       var checkedStatus = $(this).find('input[type=checkbox]').checked;
        //console.log(checkedStatus);
       var isCheckbox = !!$checkbox.length;    
        //console.log(isCheckbox);
       if (isCheckbox) {
           filters.checked = false;
           filters.indeterminate = false;
           check(path, filters, $checkbox.is(':checked'));
           var filter = find(path, filters);
            filter.exact = true;
            if (discardedFilters.length) {
                discardedFilters.forEach(function(filter) {
                    filter.exact = false;
                });
            }
           window.parameters.sp_n=1;
           window.parameters.notLoadProduct = 1;
           delete window.parameters.categoryPage;
		   window.parameters.sp_x_7= "subcategory" 
           window.parameters.sp_q_exact_7 = "";
	   window.parameters.sp_q_exact_strpath_3 = "";
           var buildObjectTMP = buildObject2(filters); 
           var buildObjectStrPath=buildObjectstrpath(filters);
           subCategName = buildObjectTMP.subcategory;
           var subStrPath = buildObjectStrPath.strPath;
           if(subCategName != undefined) {
               window.parameters.sp_x_7 = "subcategory";  
               /*if(window.parameters.sp_q_exact_3)
                   window.parameters.sp_q_exact_3 = window.parameters.sp_q_exact_3+subCategName+"|";
               else*/
                   window.parameters.sp_q_exact_7 = subCategName+"|";
           } else{
               filterId = $(this).data("id");
               var re = new RegExp(filterId+"\\|", 'g');
              // console.log(window.parameters.sp_q_exact_3);
               window.parameters.sp_q_exact_7 = window.parameters.sp_q_exact_7.replace(re,"");
               //console.log(window.parameters.sp_q_exact_3);
           }

            if(subStrPath != undefined) {
                   window.parameters.sp_q_exact_strpath_3 = subStrPath+"|";
           } 

               
            if($(this).attr("category") === "digitalassets"){
			filters.children.splice(filters.children.length-1,1);
        	}
           if($(this).attr("category") === "digitalassets"){
				if(elementName=="input"){
					parameters.assetPage=1;
					window.parameters.assetRefresh();
                }
           }else{
               $('#category-search-results .js-section-header').html("");
               $('#category-search-results .js-section-results').html("");

               if($(this).data("id") === "ref-design") {
				window.parameters.notLoadProduct = 0;
               }
             window.parameters.refreshCategories();
           }
       } else {

       }
        
    });
	var deselect = false;
    $(document).on('click', '.js-filter', function() {
        filters.checkedFlag = "false"; 
        if($(this).attr("category") === "digitalassets"){
			filters.children.push(digital);
        }
        var path = deserialize($(this).data('path'));
        //var deselect = false;
        if($(this).attr("style")) {
        if($(this).attr("style").match(/bold/)) {
			deselect = true;
            filters.selectedFlag = "false";
        }
		}
        else {
            deselect = false
            filters.selectedFlag = "true"
        }
        
        var $checkbox = $(this).find('input[type=checkbox]');
        var isCheckbox = !!$checkbox.length;
		delete window.parameters.filters;
		delete window.parameters.sp_q_2;
        delete window.parameters.sp_q_3;
        delete window.parameters.sp_q_4;
        delete window.parameters.sp_q_5;
        delete window.parameters.sp_q_6;
        delete window.parameters.sp_q_7;
        delete window.parameters.sp_q_8;        
        window.parameters.sp_n=1;
        delete window.parameters.categoryPage;
        resetNodes(filters);
        //console.log('cliced on path js-filter: ' + path);
        if (isCheckbox) {
            check(path, filters, $checkbox.is(':checked'));
        } else {
            //console.log('filters: ' );
            //console.log(filters);
            var filter = findactive(path, filters, deselect);
            if(filter.exact){
                return;
            }
            if(!deselect) {
            	filter.exact = true;
            }
            if (discardedFilters.length) {
                discardedFilters.forEach(function(filter) {
                    filter.exact = false;
                });
            }
        }
        var buildObjectTMP = buildObject(filters);
        window.parameters.filters = buildObjectTMP.filterstr;
        if (buildObjectTMP.category && deselect == false) {
			window.parameters.sp_q_2 = buildObjectTMP.category;
            window.parameters.sp_x_2 = "category";
        }
		if (buildObjectTMP.subcategory  && deselect == false) {
			window.parameters.sp_q_3 = buildObjectTMP.subcategory;            
            window.parameters.sp_x_3 = "subcategory";
        }
		if (buildObjectTMP.subsubcategory  && deselect == false) {
			window.parameters.sp_q_4 = buildObjectTMP.subsubcategory;
            window.parameters.sp_x_4 = "subsubcategory";
        }
		if (buildObjectTMP.s3category  && deselect == false) {
			window.parameters.sp_q_5 = buildObjectTMP.s3category;
            window.parameters.sp_x_5 = "s3category";
        }
		if (buildObjectTMP.s4category  && deselect == false) {
			window.parameters.sp_q_6 = buildObjectTMP.s4category;
            window.parameters.sp_x_6 = "s4category";
        }
		if (buildObjectTMP.s5category  && deselect == false) {
			window.parameters.sp_q_7 = buildObjectTMP.s5category;
            window.parameters.sp_x_7 = "s5category";
        }
		if (buildObjectTMP.s6category  && deselect == false) {
			window.parameters.sp_q_8 = buildObjectTMP.s6category;
            window.parameters.sp_x_8 = "s6category";
        }
        //console.log(window.parameters);
        if($(this).attr("category") === "digitalassets"){
			filters.children.splice(filters.children.length-1,1);
        }
 	 	if($(this).attr("category") === "digitalassets"){
			window.parameters.assetRefresh();
     	}else{
      	   window.parameters.refreshCategories();
           $("#category-search-results").trigger("completecategory");
     	}

        var formcategoryfilter ='<option class="search-filter-title" value="">'+Granite.I18n.get("allCateg")+'</option>'+buildCategoryFilters(filters);
        $('#search-filter, #search-filter-modal').html(formcategoryfilter);

        if($( "#search-filter option:selected" ).text() != undefined){
			$('#search-container span.filter-option').text($( "#search-filter option:selected" ).text());
        }
        $('#search-filter, #search-filter-modal').selectpicker();

    });

    $(document).on('click','.reset-filters-button',function() {
		//console.log('reset-filters-button  clicked');
		delete window.parameters.sp_q_2;
        delete window.parameters.sp_q_3;
        delete window.parameters.sp_q_4;
        delete window.parameters.sp_q_5;
        delete window.parameters.sp_q_6;
        delete window.parameters.sp_q_7;
        delete window.parameters.sp_q_8;
        delete window.parameters.sp_q_exact_3;
        delete window.parameters.sp_q_exact_7;
        delete window.parameters.filters;
	delete window.parameters.sp_q_exact_strpath_3;
        resetNodes(filters);
        filters.checkedFlag = "false"; 
	var formcategoryfilter ='<option class="search-filter-title" value="">'+Granite.I18n.get("allCateg")+'</option>'+buildCategoryFilters(filters);
        $('#search-filter, #search-filter-modal').html(formcategoryfilter);

        if($( "#search-filter option:selected" ).text() != undefined){
			$('#search-container span.filter-option').text($( "#search-filter option:selected" ).text());
        }
		window.parameters.refreshSnP();
    });

    
    function reframeFilters(category,varsubcatetory,varsubsubcategory){

		if(varsubcatetory != undefined){
            $("li#"+category+" > ul > li").each(function(index, value) {
                if($(this).attr("id") != varsubcatetory){
                     $(this).html(""); 
                }else{

					if(varsubsubcategory != undefined){
                        $(this).find("ul li").each(function(index, value) {
                            if($(this).attr("id") != varsubsubcategory){
                                 $(this).html(""); 
                            }else{
								if($(this).children() != undefined && $(this).children().first() != undefined){
                                    $(this).children().first().css("font-weight","Bold");
                                    if($(this).children().first().find("a") != undefined){
                                    	//$(this).children().first().find("a").css("cursor","default");
                                        $(this).children().first().find("a").on('click', function(e){
                                             // e.preventDefault();
                                             // e.stopPropagation();
                                      });
                                    }
                                }
                            }
                    });
                    }else{
						if($(this).children() != undefined && $(this).children().first() != undefined){
                    	    $(this).children().first().css("font-weight","Bold");
                             if($(this).children().first().find("a") != undefined){
                                    	//$(this).children().first().find("a").css("cursor","default");
                                        $(this).children().first().find("a").on('click', function(e){
                                             // e.preventDefault();
                                              // e.stopPropagation();
                                      });
                              }
                   		 }
                    }					
                }
        	});

         }


}

    function buildBreadcrumbs(filter, breadcrumbs) {
            breadcrumbs = breadcrumbs || [];
            var children = filter.children;
            if (!filter.checkbox && filter.active) {
                breadcrumbs.push({name: filter.name, strPath: filter.strPath});
            }
            if (children) {
                    children.forEach(function(child) {
                    buildBreadcrumbs(child, breadcrumbs);
                });
            }
            return breadcrumbs;
        }
   
    var indexes = window.parameters.filters.map(deserialize);
    $('#category-search-results').on('completecategory',function () {
        if (MXdebug) console.log('before scan filters:');
        var copiedObject = jQuery.extend(true, {}, filters)
        if (MXdebug) console.log(copiedObject);
        scan(filters, indexes);
        if (MXdebug) console.log('after scan filters:') ;
        var copiedObject2 = jQuery.extend(true, {}, filters)
        if (MXdebug) console.log(copiedObject2);
        var path = buildBreadcrumbs(filters, []);
        if( path !== undefined ){
			$('.js-breadcrumb-path').html('');
            path.shift();
            path.forEach(function(level) {
                $('.js-breadcrumb-path').append(templates.crumb(level));
            });
        }
        $('#js-filter-options-container').html("");
        $('#js-filter-options-container').html(templates.filters(filters.children, 0, []));
        $('#js-filter-options-container-mobile').html(templates.filters(filters.children, 0, []));

         var varcategory=window.parameters.sp_q_2;
         var varsubcatetory=window.parameters.sp_q_3;
         var varsubsubcategory=window.parameters.sp_q_4;
         if(varcategory != undefined && varcategory == "products"){
			 reframeFilters(varcategory,varsubcatetory,varsubsubcategory);
			 $("li#markets > ul").remove();
             $("li#markets > label >img").remove();
             $("li#markets > label > a").css("color","gray");
         }
        if(varcategory != undefined && varcategory == "markets"){
			 reframeFilters(varcategory,varsubcatetory,varsubsubcategory);
			 if(!($("li#products > ul > li") != undefined && $("li#products > ul > li").length>0)){
	              $("li#products > ul").remove();
	              $("li#products > label >img").remove();
	              $("li#products > label > a").css("color","gray");
	         }

        }
		$("li#products > ul > li").each(function(index, value) {
                    if($(this).attr("id") == "comms"){
                        if($(this).find("a") != undefined){
                          var lab =  $(this).find("a").html();
                            if(lab != undefined && lab.length>23){
                            	if(lab.length>25){
                                	$("#filter-results").css("width","112%");
                                }else{
                                    $("#filter-results").css("width","110%");
                                }
                                if($(this).hasClass("active")){
                               		 $(".filters-menu > ul > li").attr("style","padding-right:2px !important");
                                }else{
                                    $(".filters-menu > ul > li").attr("style","padding-right:4px !important");
                                }
                            }
                        }
                    }
        });
		 if($("#js-filter-options-container-asset #digitalassets") != undefined){
				$("#js-filter-options-container-asset #digitalassets").attr("style","background: rgb(240, 239, 238);");
	        }
    	$('#search-filter, #search-filter-modal').selectpicker();
    });
});

//*****************************/
//  End filters.js
//*****************************/
